///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

namespace AutomatedSystemTests
{
    public partial class CalculatePathInPropertiesPanelOfBoundaryCategory
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        public void BuildPathInPPToCategoryBoundary()
        {
        	string pathLevelOne = scopeSuffix=="t"?"Categoriegrenzen voor dit traject":"Categoriegrenzen per vak";
        	string pathLevelTwo;
        	switch (categoryType) {
        		case "I":
        			pathLevelTwo = "[1]";
        			break;
        		case "II":
        			pathLevelTwo = "[2]";
        			break;
        		case "III":
        			pathLevelTwo = "[3]";
        			break;
        		case "IV":
        			pathLevelTwo = "[4]";
        			break;
        		case "V":
        			pathLevelTwo = "[5]";
        			break;
        		case "VI":
        			pathLevelTwo = "[6]";
        			break;
        		default:
        			Report.Log(ReportLevel.Error, "", categoryType + " is no valid category type!");
        			throw new Exception();
        			break;
        	}
        	string pathLevelThree = boundaryType + "grens [1/jaar]";
        	path = pathLevelOne + ">" + pathLevelTwo + ">" + pathLevelThree; 
        }

    }
}
