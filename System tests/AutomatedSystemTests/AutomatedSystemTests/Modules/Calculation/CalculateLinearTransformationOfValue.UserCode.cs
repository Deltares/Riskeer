///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

namespace AutomatedSystemTests.Modules.Calculation
{
    public partial class CalculateLinearTransformationOfValue
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        public string LinearTransformation(string a, string b)
        {
        	System.Globalization.CultureInfo fixedCulture = new CultureInfo("en-US");
        	fixedCulture.NumberFormat.NumberDecimalSeparator = ".";
        	fixedCulture.NumberFormat.NumberGroupSeparator = "";
        	System.Globalization.CultureInfo currentCulture = CultureInfo.CurrentCulture;
        	Report.Log(ReportLevel.Info, "", "x: " + xVariable);
        	int numberOfDecimals = xVariable.Substring(xVariable.IndexOf(currentCulture.NumberFormat.NumberDecimalSeparator)+1).Length;
        	double xValue = Double.Parse(xVariable, currentCulture);
        	double aValue = Double.Parse(a, fixedCulture);
        	double bValue = Double.Parse(b, fixedCulture);
        	double yValue = aValue*xValue + bValue;
        	string y = yValue.ToString("N" + numberOfDecimals).Replace(currentCulture.NumberFormat.NumberGroupSeparator, "");
        	return y;
        }

    }
}
