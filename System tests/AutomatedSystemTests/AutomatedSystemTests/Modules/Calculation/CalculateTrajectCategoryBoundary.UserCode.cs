///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

namespace AutomatedSystemTests.Modules.Calculation
{
    public partial class CalculateTrajectCategoryBoundary
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        public string CalculateSingleCategoryBoundary()
        {
        	System.Globalization.CultureInfo currentCulture = CultureInfo.CurrentCulture;
        	string lowerLimitDenominator = lowerLimitText.Substring(2, lowerLimitText.Length-2);
        	double lowerLimitD = 1/Double.Parse(lowerLimitDenominator, currentCulture);
        	string signalingValueDenominator = signalingValueText.Substring(2, signalingValueText.Length-2);
        	double signalingValueD = 1/Double.Parse(signalingValueDenominator, currentCulture);
        	double boundaryValue;
        	var boundaryToEvaluate = categoryName + boundaryType;
        	switch (boundaryToEvaluate) {
        		case "A+Onder":
        			calculatedCategoryBoundary = "1/Oneindig";
        			Report.Log(ReportLevel.Info, "", categoryName+boundaryType+ " : " + calculatedCategoryBoundary);
        			return calculatedCategoryBoundary;
        		case "DBoven":
        			calculatedCategoryBoundary = "1/1";
        			Report.Log(ReportLevel.Info, "", categoryName+boundaryType+ " : " + calculatedCategoryBoundary);
        			return calculatedCategoryBoundary;
        		case "AOnder":
        			boundaryValue = (1.0/30.0)*signalingValueD;
        			break;
        		case "A+Boven":
        			boundaryValue = (1.0/30.0)*signalingValueD;
        			break;
        		case "BOnder":
        			boundaryValue = signalingValueD;
        			break;
        		case "ABoven":
        			boundaryValue = signalingValueD;
        			break;
        		case "COnder":
        			boundaryValue = lowerLimitD;
        			break;
        		case "BBoven":
        			boundaryValue = lowerLimitD;
        			break;
        		case "DOnder":
        			boundaryValue = 30.0*lowerLimitD;
        			break;
        		case "CBoven":
        			boundaryValue = 30.0*lowerLimitD;
        			break;
        		default:
        			Report.Log(ReportLevel.Info,"", "case : " + boundaryToEvaluate + "error!");
        			throw new Exception();
        	}
        	var denominatorBoundary = Math.Round(1/boundaryValue);
        	calculatedCategoryBoundary = "1/" + denominatorBoundary.ToString("N0", currentCulture.NumberFormat);
        	Report.Log(ReportLevel.Info, "", categoryName+boundaryType+ " : " + calculatedCategoryBoundary);
        	return calculatedCategoryBoundary;
        }

    }
}
