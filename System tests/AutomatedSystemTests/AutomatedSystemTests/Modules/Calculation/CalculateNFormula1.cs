///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace AutomatedSystemTests.Modules.Calculation
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The CalculateNFormula1 recording.
    /// </summary>
    [TestModule("41b2435b-9741-4e36-b6b5-e09633ca92af", ModuleType.Recording, 1)]
    public partial class CalculateNFormula1 : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::AutomatedSystemTests.AutomatedSystemTestsRepository repository.
        /// </summary>
        public static global::AutomatedSystemTests.AutomatedSystemTestsRepository repo = global::AutomatedSystemTests.AutomatedSystemTestsRepository.Instance;

        static CalculateNFormula1 instance = new CalculateNFormula1();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public CalculateNFormula1()
        {
            calculatedN = "";
            param_a = "";
            param_b = "";
            L_traject = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static CalculateNFormula1 Instance
        {
            get { return instance; }
        }

#region Variables

        string _calculatedN;

        /// <summary>
        /// Gets or sets the value of variable calculatedN.
        /// </summary>
        [TestVariable("c2e2a175-ac6e-4e69-a5aa-8e49e7a9e37e")]
        public string calculatedN
        {
            get { return _calculatedN; }
            set { _calculatedN = value; }
        }

        string _param_a;

        /// <summary>
        /// Gets or sets the value of variable param_a.
        /// </summary>
        [TestVariable("c4fb7e0f-1b4a-4bea-9859-6df4ef4e7575")]
        public string param_a
        {
            get { return _param_a; }
            set { _param_a = value; }
        }

        string _param_b;

        /// <summary>
        /// Gets or sets the value of variable param_b.
        /// </summary>
        [TestVariable("d4d40a20-8e23-43c9-8d61-e0223065ca14")]
        public string param_b
        {
            get { return _param_b; }
            set { _param_b = value; }
        }

        string _L_traject;

        /// <summary>
        /// Gets or sets the value of variable L_traject.
        /// </summary>
        [TestVariable("aca9a68d-d676-4995-b752-34e825497c29")]
        public string L_traject
        {
            get { return _L_traject; }
            set { _L_traject = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            calculatedN = calculateNGroup1Formula();
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
