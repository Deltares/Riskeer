///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace AutomatedSystemTests.Modules.ActionsContextMenu
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The AddNewTrajectUsingContextMenu recording.
    /// </summary>
    [TestModule("2f5dc792-0805-4c80-8900-c03885f8e020", ModuleType.Recording, 1)]
    public partial class AddNewTrajectUsingContextMenu : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::AutomatedSystemTests.AutomatedSystemTestsRepository repository.
        /// </summary>
        public static global::AutomatedSystemTests.AutomatedSystemTestsRepository repo = global::AutomatedSystemTests.AutomatedSystemTestsRepository.Instance;

        static AddNewTrajectUsingContextMenu instance = new AddNewTrajectUsingContextMenu();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public AddNewTrajectUsingContextMenu()
        {
            signallingValue = "";
            lowLimitValue = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static AddNewTrajectUsingContextMenu Instance
        {
            get { return instance; }
        }

#region Variables

        string _signallingValue;

        /// <summary>
        /// Gets or sets the value of variable signallingValue.
        /// </summary>
        [TestVariable("ccc21d7e-0554-4ccb-8297-bc7211dc82b3")]
        public string signallingValue
        {
            get { return _signallingValue; }
            set { _signallingValue = value; }
        }

        string _lowLimitValue;

        /// <summary>
        /// Gets or sets the value of variable lowLimitValue.
        /// </summary>
        [TestVariable("f6ff8bf4-da2c-4b7e-846a-9405d66c354d")]
        public string lowLimitValue
        {
            get { return _lowLimitValue; }
            set { _lowLimitValue = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable trajectToAdd.
        /// </summary>
        [TestVariable("4ea4fb61-50c3-4243-9a99-25901a404ce2")]
        public string trajectToAdd
        {
            get { return repo.trajectToAdd; }
            set { repo.trajectToAdd = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable normType.
        /// </summary>
        [TestVariable("929a9a29-2c5b-41dc-93ed-daff0f25d734")]
        public string normType
        {
            get { return repo.normType; }
            set { repo.normType = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 0;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 0.00;

            Init();

            Report.Log(ReportLevel.Info, "Invoke action", "Invoking Focus() on item 'RiskeerMainWindow.ProjectExplorer.ProjectRootNode'.", repo.RiskeerMainWindow.ProjectExplorer.ProjectRootNode.SelfInfo, new RecordItemIndex(0));
            repo.RiskeerMainWindow.ProjectExplorer.ProjectRootNode.Self.Focus();
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'RiskeerMainWindow.ProjectExplorer.ProjectRootNode' at Center.", repo.RiskeerMainWindow.ProjectExplorer.ProjectRootNode.SelfInfo, new RecordItemIndex(1));
            repo.RiskeerMainWindow.ProjectExplorer.ProjectRootNode.Self.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Apps}'.", new RecordItemIndex(2));
            Keyboard.Press("{Apps}");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ContextMenu.TrajectToevoegen' at Center.", repo.ContextMenu.TrajectToevoegenInfo, new RecordItemIndex(3));
            repo.ContextMenu.TrajectToevoegen.Click();
            
            Report.Log(ReportLevel.Info, "Invoke action", "Invoking Focus() on item 'DialogNewTraject.TableTrajects.GenericTrajectIDRow.CellTrajectId'.", repo.DialogNewTraject.TableTrajects.GenericTrajectIDRow.CellTrajectIdInfo, new RecordItemIndex(4));
            repo.DialogNewTraject.TableTrajects.GenericTrajectIDRow.CellTrajectId.Focus();
            
            Report.Log(ReportLevel.Info, "Invoke action", "Invoking Select() on item 'DialogNewTraject.TableTrajects.GenericTrajectIDRow.CellTrajectId'.", repo.DialogNewTraject.TableTrajects.GenericTrajectIDRow.CellTrajectIdInfo, new RecordItemIndex(5));
            repo.DialogNewTraject.TableTrajects.GenericTrajectIDRow.CellTrajectId.Select();
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'Text' from item 'DialogNewTraject.TableTrajects.GenericTrajectIDRow.CellSignallingValue' and assigning its value to variable 'signallingValue'.", repo.DialogNewTraject.TableTrajects.GenericTrajectIDRow.CellSignallingValueInfo, new RecordItemIndex(6));
            signallingValue = repo.DialogNewTraject.TableTrajects.GenericTrajectIDRow.CellSignallingValue.Element.GetAttributeValueText("Text");
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'Text' from item 'DialogNewTraject.TableTrajects.GenericTrajectIDRow.CellLowLimitValue' and assigning its value to variable 'lowLimitValue'.", repo.DialogNewTraject.TableTrajects.GenericTrajectIDRow.CellLowLimitValueInfo, new RecordItemIndex(7));
            lowLimitValue = repo.DialogNewTraject.TableTrajects.GenericTrajectIDRow.CellLowLimitValue.Element.GetAttributeValueText("Text");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'DialogNewTraject.NormRadioButton' at CenterLeft.", repo.DialogNewTraject.NormRadioButtonInfo, new RecordItemIndex(8));
            repo.DialogNewTraject.NormRadioButton.Click(Location.CenterLeft);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'DialogNewTraject.ButtonOk' at Center.", repo.DialogNewTraject.ButtonOkInfo, new RecordItemIndex(9));
            repo.DialogNewTraject.ButtonOk.Click();
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 10s to exist. Associated repository item: 'RiskeerMainWindow.DocumentViewContainer'", repo.RiskeerMainWindow.DocumentViewContainer.SelfInfo, new ActionTimeout(10000), new RecordItemIndex(10));
            repo.RiskeerMainWindow.DocumentViewContainer.SelfInfo.WaitForExists(10000);
            
            Report.Screenshot(ReportLevel.Info, "User", "", repo.RiskeerMainWindow.DocumentViewContainer.Self, false, new RecordItemIndex(11));
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
