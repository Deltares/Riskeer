///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace AutomatedSystemTests.Modules.ActionsDocumentView
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The SetManualFailureProbFMInResultView recording.
    /// </summary>
    [TestModule("163c57ad-a1cd-4039-a380-1c2cd7beeda3", ModuleType.Recording, 1)]
    public partial class SetManualFailureProbFMInResultView : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::AutomatedSystemTests.AutomatedSystemTestsRepository repository.
        /// </summary>
        public static global::AutomatedSystemTests.AutomatedSystemTestsRepository repo = global::AutomatedSystemTests.AutomatedSystemTestsRepository.Instance;

        static SetManualFailureProbFMInResultView instance = new SetManualFailureProbFMInResultView();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public SetManualFailureProbFMInResultView()
        {
            ManualFailureProbToSet = "";
            trajectAssessmentInformationString = "";
            currentFMLabel = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static SetManualFailureProbFMInResultView Instance
        {
            get { return instance; }
        }

#region Variables

        string _ManualFailureProbToSet;

        /// <summary>
        /// Gets or sets the value of variable ManualFailureProbToSet.
        /// </summary>
        [TestVariable("e01c85f2-d050-4f92-b45a-8644027e7a1f")]
        public string ManualFailureProbToSet
        {
            get { return _ManualFailureProbToSet; }
            set { _ManualFailureProbToSet = value; }
        }

        string _trajectAssessmentInformationString;

        /// <summary>
        /// Gets or sets the value of variable trajectAssessmentInformationString.
        /// </summary>
        [TestVariable("c1e805b2-7a7a-46c0-9c90-88f20d868939")]
        public string trajectAssessmentInformationString
        {
            get { return _trajectAssessmentInformationString; }
            set { _trajectAssessmentInformationString = value; }
        }

        string _currentFMLabel;

        /// <summary>
        /// Gets or sets the value of variable currentFMLabel.
        /// </summary>
        [TestVariable("77d535cc-7ef2-42d6-a6fc-d673b8846963")]
        public string currentFMLabel
        {
            get { return _currentFMLabel; }
            set { _currentFMLabel = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 0;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 0.00;

            Init();

            SetValueFailureProbabilityFM(repo.RiskeerMainWindow.ContainerMultipleViews.DocumentViewContainerUncached.FM_ResultView.FailureProbabilityFMInfo, trajectAssessmentInformationString, currentFMLabel);
            
            //Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'RiskeerMainWindow.ContainerMultipleViews.DocumentViewContainerUncached.FM_ResultView.FailureProbabilityFM' at 30;5.", repo.RiskeerMainWindow.ContainerMultipleViews.DocumentViewContainerUncached.FM_ResultView.FailureProbabilityFMInfo, new RecordItemIndex(1));
            //repo.RiskeerMainWindow.ContainerMultipleViews.DocumentViewContainerUncached.FM_ResultView.FailureProbabilityFM.Click("30;5");
            
            //Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{NumPad1}{Divide}{NumPad1}{NumPad2}{NumPad3}{NumPad4}{NumPad5}{NumPad6}{NumPad7}{NumPad8}{NumPad9}' with focus on 'RiskeerMainWindow.ContainerMultipleViews.DocumentViewContainerUncached.FM_ResultView.FailureProbabilityFM'.", repo.RiskeerMainWindow.ContainerMultipleViews.DocumentViewContainerUncached.FM_ResultView.FailureProbabilityFMInfo, new RecordItemIndex(2));
            //repo.RiskeerMainWindow.ContainerMultipleViews.DocumentViewContainerUncached.FM_ResultView.FailureProbabilityFM.PressKeys("{NumPad1}{Divide}{NumPad1}{NumPad2}{NumPad3}{NumPad4}{NumPad5}{NumPad6}{NumPad7}{NumPad8}{NumPad9}");
            
            //Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Return}' with focus on 'RiskeerMainWindow.ContainerMultipleViews.DocumentViewContainerUncached.FM_ResultView.FailureProbabilityFM'.", repo.RiskeerMainWindow.ContainerMultipleViews.DocumentViewContainerUncached.FM_ResultView.FailureProbabilityFMInfo, new RecordItemIndex(3));
            //repo.RiskeerMainWindow.ContainerMultipleViews.DocumentViewContainerUncached.FM_ResultView.FailureProbabilityFM.PressKeys("{Return}");
            
            //Report.Log(ReportLevel.Info, "Set value", "Setting attribute AccessibleValue to '$ManualFailureProbToSet' on item 'RiskeerMainWindow.ContainerMultipleViews.DocumentViewContainerUncached.FM_ResultView.FailureProbabilityFM'.", repo.RiskeerMainWindow.ContainerMultipleViews.DocumentViewContainerUncached.FM_ResultView.FailureProbabilityFMInfo, new RecordItemIndex(4));
            //repo.RiskeerMainWindow.ContainerMultipleViews.DocumentViewContainerUncached.FM_ResultView.FailureProbabilityFM.Element.SetAttributeValue("AccessibleValue", ManualFailureProbToSet);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
