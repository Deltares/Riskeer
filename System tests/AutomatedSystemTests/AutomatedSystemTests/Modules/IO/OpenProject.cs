///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace AutomatedSystemTests.Modules.IO
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The OpenProject recording.
    /// </summary>
    [TestModule("3f746bb2-6845-45b4-9b28-b7fd605378f3", ModuleType.Recording, 1)]
    public partial class OpenProject : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::AutomatedSystemTests.AutomatedSystemTestsRepository repository.
        /// </summary>
        public static global::AutomatedSystemTests.AutomatedSystemTestsRepository repo = global::AutomatedSystemTests.AutomatedSystemTestsRepository.Instance;

        static OpenProject instance = new OpenProject();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public OpenProject()
        {
            fileName = "";
            scriptOutputPath = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static OpenProject Instance
        {
            get { return instance; }
        }

#region Variables

        string _fileName;

        /// <summary>
        /// Gets or sets the value of variable fileName.
        /// </summary>
        [TestVariable("3c870d6e-0774-4179-b1f4-65350b234510")]
        public string fileName
        {
            get { return _fileName; }
            set { _fileName = value; }
        }

        string _scriptOutputPath;

        /// <summary>
        /// Gets or sets the value of variable scriptOutputPath.
        /// </summary>
        [TestVariable("b7b39e3c-a1f6-46e4-bf70-84c02fc78fd6")]
        public string scriptOutputPath
        {
            get { return _scriptOutputPath; }
            set { _scriptOutputPath = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 0;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 0.00;

            Init();

            ValidateFileExists(fileName);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'RiskeerMainWindow' at UpperCenter.", repo.RiskeerMainWindow.SelfInfo, new RecordItemIndex(1));
            repo.RiskeerMainWindow.Self.Click(Location.UpperCenter);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Ctrl+O' Press with focus on 'RiskeerMainWindow'.", repo.RiskeerMainWindow.SelfInfo, new RecordItemIndex(2));
            Keyboard.PrepareFocus(repo.RiskeerMainWindow.Self);
            Keyboard.Press(System.Windows.Forms.Keys.O | System.Windows.Forms.Keys.Control, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            AddWorkingDirectoryToFileNameIfRelativeFileName();
            
            Report.Log(ReportLevel.Info, "User", "Name of file to open:", new RecordItemIndex(4));
            
            Report.Log(ReportLevel.Info, "User", fileName, new RecordItemIndex(5));
            
            // Assign file name to open
            Report.Log(ReportLevel.Info, "Set value", "Assign file name to open\r\nSetting attribute Text to '$fileName' on item 'OpenDialog.FileNameField'.", repo.OpenDialog.FileNameFieldInfo, new RecordItemIndex(6));
            repo.OpenDialog.FileNameField.Element.SetAttributeValue("Text", fileName);
            
            // Click on open button
            Report.Log(ReportLevel.Info, "Mouse", "Click on open button\r\nMouse Left Click item 'OpenDialog.ButtonOpen' at Center.", repo.OpenDialog.ButtonOpenInfo, new RecordItemIndex(7));
            repo.OpenDialog.ButtonOpen.Click();
            
            // Wait time (300ms) so that dialog is started up
            Report.Log(ReportLevel.Info, "Delay", "Wait time (300ms) so that dialog is started up\r\nWaiting for 300ms.", new RecordItemIndex(8));
            Delay.Duration(300, false);
            
            Mouse_Click_ButtonNoIfConformationDialogAppears(repo.ConfirmSaveProjectDialogWhenClosing.ButtonNoInfo);
            
            // Wait time (300ms) so that dialog is started up
            Report.Log(ReportLevel.Info, "Delay", "Wait time (300ms) so that dialog is started up\r\nWaiting for 300ms.", new RecordItemIndex(10));
            Delay.Duration(300, false);
            
            // Wait until file has been loaded and open dialog has been closed
            Report.Log(ReportLevel.Info, "Wait", "Wait until file has been loaded and open dialog has been closed\r\nWaiting 30s to not exist. Associated repository item: 'ActivityProgressDialog.ProgressBar'", repo.ActivityProgressDialog.ProgressBarInfo, new ActionTimeout(30000), new RecordItemIndex(11));
            repo.ActivityProgressDialog.ProgressBarInfo.WaitForNotExists(30000);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 30s to not exist. Associated repository item: 'ActivityProgressDialog.ButtonCancel'", repo.ActivityProgressDialog.ButtonCancelInfo, new ActionTimeout(30000), new RecordItemIndex(12));
            repo.ActivityProgressDialog.ButtonCancelInfo.WaitForNotExists(30000);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 1s.", new RecordItemIndex(13));
            Delay.Duration(1000, false);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeNotContains (Text!>'Openen van project is mislukt.') on item 'RiskeerMainWindow.MessagesDataGridView.LastRowMessage.LastCellMessage'.", repo.RiskeerMainWindow.MessagesDataGridView.LastRowMessage.LastCellMessageInfo, new RecordItemIndex(14));
            Validate.AttributeNotContains(repo.RiskeerMainWindow.MessagesDataGridView.LastRowMessage.LastCellMessageInfo, "Text", "Openen van project is mislukt.");
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
