///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

namespace AutomatedSystemTests.Modules.Set_Assign.Assembly
{
    public partial class ChangeRelevanceSection
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        public void Invoke_action_ResultInitialMech(RepoItemInfo cellInfo)
        {
            var el = cellInfo.FindAdapter<Cell>().Element;
//            string colorOfCell = (string)el.InvokeRemotely( delegate(System.Windows.Forms.Control control, object input)  
//                {  
//                                                System.Windows.Forms.DataGridView dataGrid = (System.Windows.Forms.DataGridView) control;  
//                                                  
//                                                // There you can access each cell:  
//                                                Color color = dataGrid.Rows[1].Cells[2].Style.BackColor;  
//                                                Console.WriteLine("Color: "+color);  
//                                                return color.ToString();  
//                 }  
//                 );  
            Report.Log(ReportLevel.Info, "Invoke action", "Invoking Focus() on item 'cellInfo'.", cellInfo);
            cellInfo.FindAdapter<Cell>().Focus();
        }

    }
}
