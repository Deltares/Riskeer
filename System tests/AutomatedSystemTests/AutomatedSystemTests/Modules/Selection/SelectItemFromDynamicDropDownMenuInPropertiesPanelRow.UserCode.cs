///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;
using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

namespace AutomatedSystemTests.Modules.Selection
{
    public partial class SelectItemFromDynamicDropDownMenuInPropertiesPanelRow
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        
        public Ranorex.Row GetRowInPropertiesPanelGivenPath(Adapter argumentAdapter, string pathItem)
        	{
        	int minimumIndex = 0;
        	var stepsPathItem = pathItem.Split('>').ToList();
        	Ranorex.Row stepRow = argumentAdapter.As<Table>().Rows.ToList()[1];
        	for (int i=0; i < stepsPathItem.Count; i++) {
        			// Find the item corresponding to the step
        			var step = stepsPathItem[i];
        			var completeList = argumentAdapter.As<Table>().Rows.ToList();
        			var searchList = completeList.GetRange(minimumIndex, completeList.Count-minimumIndex);
        			var indexStepRow = searchList.FindIndex(rw => rw.GetAttributeValue<string>("AccessibleName").Contains(step));
        			stepRow = searchList[indexStepRow];
        			// if step is intermediate
        			if (i != stepsPathItem.Count - 1)
        				{
        			         var stateStepRow = stepRow.Element.GetAttributeValueText("AccessibleState");
        			         // if intermediate step is collapsed
        			         if (stateStepRow.Contains("Collapsed")) {
        			             // Select and expand the intermediate item
        			             Report.Log(ReportLevel.Info, "was collapsed");
        			             stepRow.Focus();
        			             stepRow.Select();
        			             stepRow.PressKeys("{Right}");
        			             }
        			     } else {
        			    // Select the final item
        			    stepRow.Focus();
        			    stepRow.Select();
        			     }
        			// Update the minimum index administration (only search forward)
        			minimumIndex += 1 + indexStepRow;
        			}
        	return stepRow;
        	}
        
        public void SelectItemFromDynamicDropDownMenuInRowPropertiesPanel(RepoItemInfo listitemInfo, string pathToRowItemInPropertiesPanel)
        {
            AutomatedSystemTestsRepository myRepository = global::AutomatedSystemTests.AutomatedSystemTestsRepository.Instance;
            Adapter propertiesPanelAdapter = myRepository.RiskeerMainWindow.PropertiesPanelContainer.Table.Self;
            Ranorex.Row row = GetRowInPropertiesPanelGivenPath(propertiesPanelAdapter, pathToRowItemInPropertiesPanel);
            row.Click();
            row.Click(".98;.5");
            listitemInfo.FindAdapter<ListItem>().Focus();
            listitemInfo.FindAdapter<ListItem>().Click();
        }

    }
}
