///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Globalization;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

namespace AutomatedSystemTests.Modules.Validation.PropertiesPanel
{
    public partial class ValidateCategoryBoundaryInPropertiesPanel
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        public Ranorex.Row GetRowInPropertiesPanelGivenPath(Adapter argumentAdapter, string pathItem)
        	{
        	int minimumIndex = 0;
        	var stepsPathItem = pathItem.Split('>').ToList();
        	Ranorex.Row stepRow = argumentAdapter.As<Table>().Rows.ToList()[1];
        	for (int i=0; i < stepsPathItem.Count; i++) {
        			// Find the item corresponding to the step
        			var step = stepsPathItem[i];
        			var completeList = argumentAdapter.As<Table>().Rows.ToList();
        			var searchList = completeList.GetRange(minimumIndex, completeList.Count-minimumIndex);
        			var indexStepRow = searchList.FindIndex(rw => rw.GetAttributeValue<string>("AccessibleName") == step);
        			stepRow = searchList[indexStepRow];
        			// Select (and expand) the item
        			stepRow.Focus();
        			stepRow.Select();
        			if (i != stepsPathItem.Count - 1)
        				{
        					stepRow.PressKeys("{Right}");
        				}
        			
        			// Update the minimum index administration (only search forward)
        			minimumIndex += 1 + indexStepRow;
        			}
        	return stepRow;
        }

        public void ValidateValueCellGivenPath(Adapter propertiesPanelAdapter, string pathCell)
        {
        	Ranorex.Row row = GetRowInPropertiesPanelGivenPath(propertiesPanelAdapter, pathCell);
        	var currentBoundary = row.GetAttributeValue<string>("AccessibleValue");
        	Report.Log(ReportLevel.Info, "", "Current value: " + currentBoundary);
        	Report.Log(ReportLevel.Info, "", "Expected value: " + expectedBoundary);
        	if (currentBoundary==expectedBoundary) {
            	Validate.AreEqual(currentBoundary, expectedBoundary);
            }
            else {
            	System.Globalization.CultureInfo currentCulture = CultureInfo.CurrentCulture;
            	Report.Log(ReportLevel.Info, "Validation", "Value found: " + currentBoundary + " is not equal to expected value: " + expectedBoundary + "\r\nEvaluating whether they are almost (within 0.01%) equal...");
            	var expectedDouble = 1.0/(Double.Parse(expectedBoundary.Substring(2,expectedBoundary.Length-2), currentCulture));
            	var currentDouble = 1.0/(Double.Parse(currentBoundary.Substring(2,currentBoundary.Length-2), currentCulture));
            	var deviation = Math.Abs(100.0*(expectedDouble - currentDouble) / expectedDouble);
            	Report.Log(ReportLevel.Info, "Validation", "Deviation = " + deviation + " %");
            	Validate.IsTrue(deviation<0.01);
            }
        }

    }
}
