///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Globalization;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;
using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;
using Ranorex_Automation_Helpers.UserCodeCollections;

namespace AutomatedSystemTests.Modules.Validation.PropertiesPanel
{
    public partial class ValidateDoubleValueparameterInPropertiesPanelGivenPath
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        public void ValidateValueDoubleOfParameterInPropertiesPanelGivenPath(Adapter propertiesPanelAdapter, string pathToRowInPropertiesPanel)
        {
            System.Globalization.CultureInfo fixedDataSourceCulture = new CultureInfo("en-US");
            fixedDataSourceCulture.NumberFormat.NumberDecimalSeparator = ".";
            fixedDataSourceCulture.NumberFormat.NumberGroupSeparator = "";
            System.Globalization.CultureInfo currentCulture = CultureInfo.CurrentCulture;

            Ranorex.Row row = PropertiesPanelHelpers.GetRowInPropertiesPanelGivenPath(pathToRowInPropertiesPanel, propertiesPanelAdapter);
            string currentValueString = row.Element.GetAttributeValueText("AccessibleValue");
            double currentValueDouble = Double.Parse(currentValueString, currentCulture);
            double expectedValueDouble = Double.Parse(expectedValueString, fixedDataSourceCulture);

            double deviation = Math.Abs(currentValueDouble-expectedValueDouble);
            Validate.IsTrue(deviation<0.00000001);
        }
    }
}
