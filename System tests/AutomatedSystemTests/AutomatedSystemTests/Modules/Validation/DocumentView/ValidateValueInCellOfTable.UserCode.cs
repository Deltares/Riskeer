///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Globalization;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

namespace AutomatedSystemTests.Modules.Validation.DocumentView
{
    public partial class ValidateValueInCellOfTable
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        public void ValidateValueOfCellInTable(Adapter tableItemAdapter, string comparisonValue, string isComparisonValueExpectedToBePresent)
        {
            Ranorex.Table table = tableItemAdapter.As<Table>();
            Row row = table.Rows[Int32.Parse(rowIndex)+1];
            Cell cell = row.Cells[Int32.Parse(columnIndex)];
            cell.Focus();
            cell.Select();
            string currentValue = cell.Element.GetAttributeValueText("AccessibleValue");
            
            if (comparisonValue=="-") {
                if (isComparisonValueExpectedToBePresent=="true") {
                    Validate.AreEqual(currentValue, comparisonValue);
                }
                else    {
                    Validate.IsTrue(currentValue!=comparisonValue);
                }
            } else{
                System.Globalization.CultureInfo fixedDataSourceCulture = new CultureInfo("en-US");
                fixedDataSourceCulture.NumberFormat.NumberDecimalSeparator = ".";
                fixedDataSourceCulture.NumberFormat.NumberGroupSeparator = "";
                System.Globalization.CultureInfo currentCulture = CultureInfo.CurrentCulture;
                
                double expectedValueDouble = Double.Parse(comparisonValue, fixedDataSourceCulture);
                double currentValueDouble = Double.Parse(currentValue, currentCulture);
                
                if (isComparisonValueExpectedToBePresent=="true") {
                    Validate.AreEqual(currentValueDouble, expectedValueDouble);
                }
                else    {
                    Validate.IsTrue(currentValueDouble!=expectedValueDouble);
                }
            }
            
        }

    }
}
