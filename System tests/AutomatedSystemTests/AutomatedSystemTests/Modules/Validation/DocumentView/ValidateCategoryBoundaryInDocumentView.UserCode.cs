///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

namespace AutomatedSystemTests.Modules.Validation.DocumentView
{
    public partial class ValidateCategoryBoundaryInDocumentView
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        public void Validate_GenericCategoryBoundaryCellAlmostEqual(RepoItemInfo cellInfo)
        {
            Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (AccessibleValue=$expectedBoundary) on item 'cellInfo'.", cellInfo);
            var currentValue = cellInfo.CreateAdapter<Cell>(true).GetAttributeValue<string>("AccessibleValue");
            if (currentValue==expectedBoundary) {
            	Validate.AttributeEqual(cellInfo, "AccessibleValue", expectedBoundary);
            }
            else {
            	System.Globalization.CultureInfo currentCulture = CultureInfo.CurrentCulture;
            	Report.Log(ReportLevel.Info, "Validation", "Value found: " + currentValue + " is not equal to expected value: " + expectedBoundary + "\r\nEvaluating whether they are almost (within 0.01%) equal...");
            	var expectedDouble = 1.0/(Double.Parse(expectedBoundary.Substring(2,expectedBoundary.Length-2), currentCulture));
            	var currentDouble = 1.0/(Double.Parse(currentValue.Substring(2,currentValue.Length-2), currentCulture));
            	var deviation = Math.Abs(100.0*(expectedDouble - currentDouble) / expectedDouble);
            	Report.Log(ReportLevel.Info, "Validation", "Deviation = " + deviation + " %");
            	Validate.IsTrue(deviation<0.01);
            }
        }

    }
}
