///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Globalization;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

namespace AutomatedSystemTests.Modules.Validation
{
    public partial class ValidateDetailedAssessmentValueAtRow
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        public void ValidateDetailedAssessmentCell(RepoItemInfo cellInfo, string expectedValue)
        {
            System.Globalization.CultureInfo currentCulture = CultureInfo.CurrentCulture;
            var currentValue = cellInfo.CreateAdapter<Cell>(true).GetAttributeValue<string>("AccessibleValue");
            currentValue = "1/" + Double.Parse(currentValue.Substring(2,currentValue.Length-2), currentCulture).ToString();
            Report.Log(ReportLevel.Info, "", "Current value: " + currentValue);
        	Report.Log(ReportLevel.Info, "", "Expected value: " + expectedValue);
        	if (currentValue==expectedValue) {
            	Validate.AreEqual(currentValue, expectedValue);
            }
            else {
            	Report.Log(ReportLevel.Info, "Validation", "Value found: " + currentValue + " is not equal to expected value: " + expectedValue + "\r\nEvaluating whether they are almost (within 0.01%) equal...");
            	var expectedDouble = 1.0/(Double.Parse(expectedValue.Substring(2,expectedValue.Length-2), currentCulture));
            	var currentDouble = 1.0/(Double.Parse(currentValue.Substring(2,currentValue.Length-2), currentCulture));
            	var deviation = Math.Abs(100.0*(expectedDouble - currentDouble) / expectedDouble);
            	Report.Log(ReportLevel.Info, "Validation", "Deviation = " + deviation + " %");
            	Validate.IsTrue(deviation<0.01);
            }
        }

    }
}
