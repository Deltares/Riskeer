///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace AutomatedSystemTests.Modules.Validation.ProjectExplorer
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The ValidateSubsurfaceSchematizationName recording.
    /// </summary>
    [TestModule("560d0007-fd1b-471b-9883-19d6c73cf565", ModuleType.Recording, 1)]
    public partial class ValidateSubsurfaceSchematizationName : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::AutomatedSystemTests.AutomatedSystemTestsRepository repository.
        /// </summary>
        public static global::AutomatedSystemTests.AutomatedSystemTestsRepository repo = global::AutomatedSystemTests.AutomatedSystemTestsRepository.Instance;

        static ValidateSubsurfaceSchematizationName instance = new ValidateSubsurfaceSchematizationName();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public ValidateSubsurfaceSchematizationName()
        {
            nameSubsurfaceSchematization = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static ValidateSubsurfaceSchematizationName Instance
        {
            get { return instance; }
        }

#region Variables

        string _nameSubsurfaceSchematization;

        /// <summary>
        /// Gets or sets the value of variable nameSubsurfaceSchematization.
        /// </summary>
        [TestVariable("3e080daf-3a8c-454e-9f1c-885391b833ba")]
        public string nameSubsurfaceSchematization
        {
            get { return _nameSubsurfaceSchematization; }
            set { _nameSubsurfaceSchematization = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable substringTrajectName.
        /// </summary>
        [TestVariable("77ae6c27-603e-4704-add9-e1249169f0e5")]
        public string substringTrajectName
        {
            get { return repo.substringTrajectName; }
            set { repo.substringTrajectName = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable substringFMName.
        /// </summary>
        [TestVariable("3a7276c1-fca1-4026-9d2e-5bac10651a47")]
        public string substringFMName
        {
            get { return repo.substringFMName; }
            set { repo.substringFMName = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable subsurfaceStochasticModelName.
        /// </summary>
        [TestVariable("3ffbed7a-4559-45fe-b4e5-1a945317051e")]
        public string subsurfaceStochasticModelName
        {
            get { return repo.subsurfaceStochasticModelName; }
            set { repo.subsurfaceStochasticModelName = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable subsurfaceSchematizationName.
        /// </summary>
        [TestVariable("d6395975-e717-466e-bd96-55cf93332255")]
        public string subsurfaceSchematizationName
        {
            get { return repo.subsurfaceSchematizationName; }
            set { repo.subsurfaceSchematizationName = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 0;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 0.00;

            Init();

            try {
                Report.Log(ReportLevel.Info, "Mouse", "(Optional Action)\r\nMouse Left Click item 'RiskeerMainWindow.ProjectExplorer.ProjectRootNode.TrajectWithSubstringInName.GenericFMItemWithSubstringInName.InputFM.StochasticSoilModelCollection.GenericSubsurfaceSchematization' at Center.", repo.RiskeerMainWindow.ProjectExplorer.ProjectRootNode.TrajectWithSubstringInName.GenericFMItemWithSubstringInName.InputFM.StochasticSoilModelCollection.GenericSubsurfaceSchematizationInfo, new RecordItemIndex(0));
                repo.RiskeerMainWindow.ProjectExplorer.ProjectRootNode.TrajectWithSubstringInName.GenericFMItemWithSubstringInName.InputFM.StochasticSoilModelCollection.GenericSubsurfaceSchematization.Click();
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(0)); }
            
            try {
                Report.Screenshot(ReportLevel.Info, "User", "", repo.RiskeerMainWindow.PropertiesPanelContainer.Table.Name, false, new RecordItemIndex(1));
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(1)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (AccessibleValue=$nameSubsurfaceSchematization) on item 'RiskeerMainWindow.PropertiesPanelContainer.Table.Name'.", repo.RiskeerMainWindow.PropertiesPanelContainer.Table.NameInfo, new RecordItemIndex(2));
                Validate.AttributeEqual(repo.RiskeerMainWindow.PropertiesPanelContainer.Table.NameInfo, "AccessibleValue", nameSubsurfaceSchematization, null, false);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(2)); }
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
