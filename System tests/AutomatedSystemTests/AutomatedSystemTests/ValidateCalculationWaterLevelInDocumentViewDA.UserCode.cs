///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Globalization;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

namespace AutomatedSystemTests
{
    public partial class ValidateCalculationWaterLevelInDocumentViewDA
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        public void ValidateValueWaterLevelInDocumentViewDA(RepoItemInfo cellInfo)
        {
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$expectedValue) on item 'cellInfo'.", cellInfo);
            
            System.Globalization.CultureInfo fixedDataSourceCulture = new CultureInfo("en-US");
			fixedDataSourceCulture.NumberFormat.NumberDecimalSeparator = ".";
			fixedDataSourceCulture.NumberFormat.NumberGroupSeparator = "";
			System.Globalization.CultureInfo currentCulture = CultureInfo.CurrentCulture;
			
			Report.Log(ReportLevel.Info, "", cellInfo.FindAdapter<Cell>().GetAttributeValue<String>("AccessibleName"));
			
			string currentValue = cellInfo.FindAdapter<Cell>().GetAttributeValue<String>("Text");
			
			if (expectedValue=="-") {
				Validate.AreEqual(currentValue, expectedValue);
			} else {
				double expectedValueDouble = Double.Parse(expectedValue, fixedDataSourceCulture);
				double currentValueDouble = Double.Parse(currentValue, currentCulture);
			
				Validate.AreEqual(currentValueDouble, expectedValueDouble);
			}
        }

    }
}
