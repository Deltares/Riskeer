///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

namespace AutomatedSystemTests
{
    public partial class ValidateProbabilitySpaceInFailureMechanismContributionView
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        public void Validate_ProbabilitySpaceCell(RepoItemInfo cellInfo)
        {
        	string expectedProbabilitySpace;
        	if (contributionValue=="0") {
        		expectedProbabilitySpace = "nvt";
        	} else {
	        	string failureProbToUse = normTypeVar=="Signal"?signallingValueVar:lowLimitValueVar;
	        	Report.Log(ReportLevel.Info, "normType: " + normTypeVar + ", failure probability to use:" + failureProbToUse);
	        	string invFailureProbToUse = failureProbToUse.Substring(failureProbToUse.LastIndexOf('/') + 1);
	        	// Remove spaces or dots from formatting thousands or its multiples
	        	invFailureProbToUse = invFailureProbToUse.Replace(" ","").Replace(".","");
	        	double invProbabilitySpaceNumber = Math.Round(Double.Parse(invFailureProbToUse)*100.0/Double.Parse(contributionValue));
	        	expectedProbabilitySpace = "1/" + invProbabilitySpaceNumber.ToString();
        	}
        	Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (AccessibleValue=$probabilitySpaceValue) on item 'cellInfo'.", cellInfo);
        	string actualProbabilitySpace = cellInfo.CreateAdapter<Cell>(true).GetAttributeValue<string>("AccessibleValue");
        	// Remove spaces or dots from formatting thousands or its multiples
        	actualProbabilitySpace = actualProbabilitySpace.Replace(" ","").Replace(".","");
        	Report.Log(ReportLevel.Info, "Actual Probability space: " + actualProbabilitySpace);
        	Report.Log(ReportLevel.Info, "Expected Probability space: " + expectedProbabilitySpace);
        	Validate.AreEqual(actualProbabilitySpace, expectedProbabilitySpace);
        }
    }
}
