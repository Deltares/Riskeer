///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;
using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

namespace AutomatedSystemTests
{
    public partial class ValidateProbabilitySpaceInFailureMechanismContributionView
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        public void Validate_ProbabilitySpaceCell(RepoItemInfo cellInfo)
        {
        	string expectedProbabilitySpace;
        	string actualProbabilitySpace;
        	System.Globalization.CultureInfo currentCulture = CultureInfo.CurrentCulture;
        	if (contributionValue=="0") {
        		expectedProbabilitySpace = "n.v.t";
        		actualProbabilitySpace = cellInfo.CreateAdapter<Cell>(true).GetAttributeValue<string>("AccessibleValue");
        		Report.Log(ReportLevel.Info, "Actual Probability space: " + actualProbabilitySpace);
        		Report.Log(ReportLevel.Info, "Expected Probability space: " + expectedProbabilitySpace);
        		Validate.AreEqual(actualProbabilitySpace, expectedProbabilitySpace);
        	} else {
        		string expectedFailureProbToUse = normTypeVar=="Signal"?signallingValueVar:lowLimitValueVar;
	        	Report.Log(ReportLevel.Info, "normType: " + normTypeVar + ", failure probability to use:" + expectedFailureProbToUse);
	        	string invExpectedFailureProbToUse = expectedFailureProbToUse.Substring(expectedFailureProbToUse.LastIndexOf('/') + 1);
	        	double invProbabilitySpaceNumber = Math.Round(Double.Parse(invExpectedFailureProbToUse, currentCulture)*100.0/Double.Parse(contributionValue, currentCulture));
	        	expectedProbabilitySpace = "1/" + invProbabilitySpaceNumber.ToString();
	        	actualProbabilitySpace = cellInfo.CreateAdapter<Cell>(true).GetAttributeValue<string>("AccessibleValue");
	        	string invActualProbabilitySpace = actualProbabilitySpace.Substring(actualProbabilitySpace.LastIndexOf('/') + 1);
	        	actualProbabilitySpace = "1/" + (Double.Parse(invActualProbabilitySpace, currentCulture)).ToString();
        		Report.Log(ReportLevel.Info, "Actual Probability space: " + actualProbabilitySpace);
        		Report.Log(ReportLevel.Info, "Expected Probability space: " + expectedProbabilitySpace);
        		Validate.AreEqual(actualProbabilitySpace, expectedProbabilitySpace);
        	}
        	//string actualProbabilitySpace = cellInfo.CreateAdapter<Cell>(true).GetAttributeValue<string>("AccessibleValue");
        	//double invActualProbabilitySpaceValue = Double.Parse(actualProbabilitySpace.Substring(actualProbabilitySpace.LastIndexOf('/') + 1), currentCulture);
        	//Report.Log(ReportLevel.Info, "Actual Probability space: " + actualProbabilitySpace);
        	//Report.Log(ReportLevel.Info, "Expected Probability space: " + expectedProbabilitySpace);
        	//Validate.AreEqual(invActualProbabilitySpaceValue, invProbabilitySpaceNumber);
        }
    }
}
