///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;
using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

namespace AutomatedSystemTests
{
    public partial class ValidateRelevanceFMInProjectExplorer
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        public void ValidateNumberOfNodesInFM(RepoItemInfo fmObjectInfo, string expectedRelevance)
        {
            int numberOfChildren = fmObjectInfo.FindAdapter<TreeItem>().Children.Count;
            Report.Log(ReportLevel.Info, "Info", "Failure mechanism (FM) node contains " + numberOfChildren + " items.", fmObjectInfo);
            string currentRelevance = numberOfChildren!=1 ? "True" : "False";
            Report.Log(ReportLevel.Info, "Info", "The relevance of the FM is  " + currentRelevance + ".", fmObjectInfo);
            Validate.AreEqual(currentRelevance, expectedRelevance);
           
        }

        public void ValidateNumberOfItemsInContextMenu(RepoItemInfo contextMenuInfo, string expectedRelevance)
        {
        	var contextMenuChildren= contextMenuInfo.FindAdapter<ContextMenu>().Children;
        	var menuItemChildren = contextMenuChildren.Where(singleChild => singleChild.Element.Role.ToString()=="MenuItem [menuitem]");
        	int  numberOfChildren = menuItemChildren.ToList().Count;
            Report.Log(ReportLevel.Info, "Info", "Failure mechanism (FM) context menu contains the following " + numberOfChildren + " items:", contextMenuInfo);
            foreach (var subitem in menuItemChildren) {
            	Report.Log(ReportLevel.Info, "Info", "\t \t" + subitem.ToString().Substring(10, subitem.ToString().IndexOf('}')-10), contextMenuInfo);
            }
            string currentRelevance = numberOfChildren>4 ? "True" : "False";
            Report.Log(ReportLevel.Info, "Info", "The relevance of the FM is  " + currentRelevance + ".", contextMenuInfo);
            Validate.AreEqual(currentRelevance, expectedRelevance);
        }

    }
}
