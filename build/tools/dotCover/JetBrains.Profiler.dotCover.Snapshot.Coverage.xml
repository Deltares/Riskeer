<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JetBrains.Profiler.dotCover.Snapshot.Coverage</name>
    </assembly>
    <members>
        <member name="M:JetBrains.Profiler.Snapshot.Coverage.CoverageSnapshotManager.Merge(JetBrains.Profiler.Snapshot.Coverage.Interface.MergeType,System.Collections.Generic.IEnumerable{JetBrains.Profiler.Snapshot.Interface.Storage.IStorageDescriptor},JetBrains.Profiler.Snapshot.Interface.Storage.IStorageDescriptor,System.Func{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.String},JetBrains.Application.Progress.IProgressIndicator)">
            <exception cref="T:JetBrains.Application.Progress.ProcessCancelledException">if cancelled</exception>
        </member>
        <member name="M:JetBrains.Profiler.Snapshot.Coverage.CoverageSnapshotManager.GetFileNames(System.String)">
            <summary>
            Returns list of all snapshot files (there are snapshots consisting of multiple files)
            </summary>
            <param name="indexFile">snapshot index file</param>
            <returns>list of all snapshot files</returns>
        </member>
        <member name="M:JetBrains.Profiler.Snapshot.Coverage.Merging.ConvolutionUtil.Convolve``1(System.Collections.Generic.IEnumerable{``0},System.Int32,JetBrains.Application.Progress.IProgressIndicator,JetBrains.Profiler.Snapshot.Coverage.Merging.ConvolutionUtil.Func{System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32,System.Boolean,JetBrains.Application.Progress.IProgressIndicator,``0})">
            <summary>
            Performs convolution
            </summary>
            <typeparam name="T">item type</typeparam>
            <param name="source">source collection</param>
            <param name="maxItemsNumber">max number of items to be processed simultaneously</param>
            <param name="progress">progress indicator</param>
            <param name="func">convolution function: (itemsToConvolve, firstItemIndex, lastItemIndex, isLastStep, progress) => convolvedItem</param>
            <returns>resulting item</returns>
        </member>
        <member name="M:JetBrains.Profiler.Snapshot.Coverage.Merging.ElementNameIndex.ElementNameIndexSectionMerger.Merge(JetBrains.Profiler.Snapshot.Coverage.Interface.MergeType,JetBrains.Profiler.Snapshot.Storage.SnapshotStorageSection[],System.Func{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.Int32,System.Collections.Generic.IList{System.Int32}}[]@,System.Collections.Generic.IDictionary{System.Int32,System.Collections.Generic.IList{System.Int32}}@,System.Int32@,System.Int32@,JetBrains.Profiler.Snapshot.IStorageSectionWriter,JetBrains.Application.Progress.IProgressIndicator)">
            <summary>
            Merges element name index sections
            </summary>
            <param name="mergeType"></param>
            <param name="sourceSections">element name index storage sections</param>
            <param name="groupNamesMapping">function that converts element names before they are processed</param>
            <param name="parentElementMapping"></param>
            <param name="reverseGroupIndexMappings">mappings from resulting group index to list of source group indices for each snapshot</param>
            <param name="reverseGroupIndexMappingInResultingSnapshot">mappings from resulting group index to list of aggregated group indices from resulting snapshot</param>
            <param name="totalGroupIndex">index of aggregated root element in resulting snapshot</param>
            <param name="writer">storage section writer</param>
            <param name="progress">progress indicator</param>
            <param name="resultingGroupsNumber">number of resulting snapshot groups to write</param>
            <exception cref="T:JetBrains.Application.Progress.ProcessCancelledException">if cancelled</exception>
        </member>
        <member name="M:JetBrains.Profiler.Snapshot.Coverage.Merging.EnvironmentSectionMerger.Merge(JetBrains.Profiler.Snapshot.Storage.SnapshotStorageSection[],JetBrains.Profiler.Snapshot.IStorageSectionWriter,JetBrains.Application.Progress.IProgressIndicator)">
            <summary>
            Merges environment sections.
            </summary>
            <param name="storageSections">source storage sections</param>
            <param name="writer">storage section writer</param>
            <param name="progress">progress indicator</param>
            <exception cref="T:JetBrains.Application.Progress.ProcessCancelledException">if cancelled</exception>
        </member>
        <member name="M:JetBrains.Profiler.Snapshot.Coverage.Merging.FileNameIndexSectionMerger.Merge(JetBrains.Profiler.Snapshot.Storage.SnapshotStorageSection[],System.Collections.Generic.IDictionary{System.Int32,System.Int32}[]@,JetBrains.Profiler.Snapshot.IStorageSectionWriter,JetBrains.Application.Progress.IProgressIndicator)">
            <summary>
            Merges file name index sections.
            Resulting sections are written using the specified writer.
            </summary>
            <param name="sourceSections">file name index storage sections </param>
            <param name="fileNameIndexMappings">file name index mappings for each snapshot</param>
            <param name="writer">storage section writer</param>
            <param name="progress">progress indicator</param>
            <exception cref="T:JetBrains.Application.Progress.ProcessCancelledException">if cancelled</exception>
        </member>
        <member name="M:JetBrains.Profiler.Snapshot.Coverage.Merging.FunctionDataAndStatementDataSectionMerger.Merge(JetBrains.Profiler.Snapshot.Storage.SnapshotStorageSection[],JetBrains.Profiler.Snapshot.Storage.SnapshotStorageSection[],System.Collections.Generic.IDictionary{JetBrains.Profiler.Snapshot.Interface.Section.SectionIndex{JetBrains.Profiler.Snapshot.Interface.Section.Metadata.IMetadataSection},JetBrains.Profiler.Snapshot.Coverage.Merging.IAssemblyMappingInfo}[],System.Collections.Generic.IDictionary{System.Int32,System.Int32}[],System.Collections.Generic.IDictionary{JetBrains.Profiler.Snapshot.Interface.Section.MetadataId,JetBrains.Profiler.Snapshot.Interface.Section.MetadataId}[]@,JetBrains.Profiler.Snapshot.Coverage.Merging.IStatementFilter@,JetBrains.Profiler.Snapshot.IStorageSectionWriter,JetBrains.Application.Progress.IProgressIndicator)">
            <summary>
            Merges function data and statement data sections.
            </summary>
            <exception cref="T:JetBrains.Application.Progress.ProcessCancelledException">if cancelled</exception>
        </member>
        <member name="M:JetBrains.Profiler.Snapshot.Coverage.Merging.MetadataSectionMerger.Merge(JetBrains.Profiler.Snapshot.Coverage.Interface.MetadataMappingMode,JetBrains.Profiler.Snapshot.Storage.SnapshotStorageSection[],System.Collections.Generic.IDictionary{JetBrains.Profiler.Snapshot.Interface.Section.SectionIndex{JetBrains.Profiler.Snapshot.Interface.Section.Metadata.IMetadataSection},JetBrains.Profiler.Snapshot.Coverage.Merging.IAssemblyMappingInfo}[]@,JetBrains.Profiler.Snapshot.IStorageSectionWriter,JetBrains.Application.Progress.IProgressIndicator)">
            <summary>
            Merges several metadata sections any writes resulting section to the output stream.
            </summary>
            <param name="metadataMappingMode">Mode for matching metadata assemblies</param>
            <param name="storageSections">source storage sections</param>
            <param name="metadataIndexToAssemblyInfoMappings">metadata mapping info for each metadata section</param>
            <param name="storageSectionWriter">output writer</param>
            <param name="progress">progress indicator</param>
            <exception cref="T:JetBrains.Application.Progress.ProcessCancelledException">if cancelled</exception>
        </member>
        <member name="F:JetBrains.Profiler.Snapshot.Coverage.Merging.ReverseFunctionCoverageBlockSizeAndMasksSectionMerger.BitsInBlock">
            <summary>
            Number of bits in the block item
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:JetBrains.Profiler.Snapshot.Coverage.Merging.ReverseFunctionCoverageBlockSizeAndMasksSectionMerger.Merge(JetBrains.Profiler.Snapshot.Coverage.Interface.MergeType,JetBrains.Profiler.Snapshot.Storage.SnapshotStorageSection[],JetBrains.Profiler.Snapshot.Storage.SnapshotStorageSection[],System.Collections.Generic.IDictionary{System.Int32,System.Int32}[],System.Collections.Generic.IDictionary{System.Int32,System.Collections.Generic.IList{System.Int32}}[],System.Int32,System.Int32,JetBrains.Profiler.Snapshot.IStorageSectionWriter,JetBrains.Application.Progress.IProgressIndicator)" -->
        <member name="M:JetBrains.Profiler.Snapshot.Coverage.Merging.ReverseFunctionCoverageBlockSizeAndMasksSectionMerger.ReadMasksBlock(JetBrains.Profiler.Snapshot.Storage.SnapshotStorageSection,System.Int32[],System.Int32)">
            <summary>
            Read masks block
            </summary>
            <param name="storageSection">source masks storage section</param>
            <param name="blockSizes">relevant block sizes</param>
            <param name="blockIndex">required block index</param>
            <returns>masks block</returns>
        </member>
        <member name="M:JetBrains.Profiler.Snapshot.Coverage.Merging.ReverseFunctionCoverageIndexSectionMerger.Merge(JetBrains.Profiler.Snapshot.Storage.SnapshotStorageSection[],System.Collections.Generic.IDictionary{JetBrains.Profiler.Snapshot.Interface.Section.MetadataId,JetBrains.Profiler.Snapshot.Interface.Section.MetadataId}[],System.Collections.Generic.IDictionary{System.Int32,System.Int32}[]@,System.Int32@,JetBrains.Profiler.Snapshot.IStorageSectionWriter,JetBrains.Application.Progress.IProgressIndicator)">
            <summary>
            Merges reverse function coverage index sections.
            </summary>
            <param name="sourceSections">Source storage sections</param>
            <param name="metadataIdMappings">Metadata id mappings. If key is not present in the dictionary, it means that it is mapped to itself.</param>
            <param name="functionIndexMappings">Function index mappings. If key is not present in the dictionary, it means that it is mapped to itself.</param>
            <param name="resultingFunctionsNumber">number of functions after merge</param>
            <param name="writer">Resulting storage writer</param>
            <param name="progress">progress indicator</param>
            <exception cref="T:JetBrains.Application.Progress.ProcessCancelledException">if cancelled</exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:JetBrains.Profiler.Snapshot.Coverage.Merging.StatementCoverageSectionGroupMerger.Merge(System.Collections.Generic.IList{JetBrains.Profiler.Snapshot.Coverage.StorageSectionCollection.Group}[],System.Collections.Generic.IDictionary{JetBrains.Profiler.Snapshot.Interface.Section.MetadataId,JetBrains.Profiler.Snapshot.Interface.Section.MetadataId}[],JetBrains.Profiler.Snapshot.Coverage.Merging.IStatementFilter,System.Collections.Generic.IDictionary{System.Int32,System.Collections.Generic.IList{System.Int32}}[],System.Collections.Generic.IDictionary{System.Int32,System.Collections.Generic.IList{System.Int32}},System.Int32,System.Int32,JetBrains.Profiler.Snapshot.IStorageSectionWriter,JetBrains.Application.Progress.IProgressIndicator)" -->
        <member name="M:JetBrains.Profiler.Snapshot.Coverage.Merging.StatementCoverageSectionGroupMerger.CreateMergingData(System.Boolean,JetBrains.Profiler.Snapshot.Coverage.Merging.IStatementFilter,System.Collections.Generic.IDictionary{JetBrains.Profiler.Snapshot.Interface.Section.MetadataId,JetBrains.Profiler.Snapshot.Coverage.Section.StatementCoverageDetails.CounterStatementDetails})">
            <summary>
            Merges section groups with the same name in multiple snapshots
            </summary>
            <param name="total">specifies if the groups are total</param>
            <param name="resultingStatementFilter">resulting statement filter</param>
            <param name="mergedDetails"></param>
            <param name="groupName"></param>
        </member>
        <member name="M:JetBrains.Profiler.Snapshot.Coverage.StorageSectionCollector.Collect(JetBrains.Profiler.Snapshot.Storage.ISnapshotStorage)">
            <exception cref="T:JetBrains.Application.Progress.ProcessCancelledException">if cancelled</exception>
        </member>
    </members>
</doc>
