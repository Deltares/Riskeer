<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JetBrains.Platform.dotCover.DocumentManager</name>
    </assembly>
    <members>
        <member name="M:JetBrains.DocumentManagers.impl.StandaloneShellDocumentFactory.CreateIdeDocumentFromText(System.String,System.String,System.Func{JetBrains.DocumentModel.IDocument,JetBrains.Util.ModificationCookie})">
            <summary>
            Creates an <see cref="T:JetBrains.DocumentModel.IDocument"/> from the given text.
            The document implementation is specific to the Shell. In tests, this is the same as <see cref="!:DocumentFactory.CreateSimpleDocumentFromText(string,string,System.Func&lt;JetBrains.DocumentModel.IDocument,JetBrains.Util.ModificationCookie&gt;)"/>. In Visual Studio, this is a VS Text Buffer.
            </summary>
            <param name="text">Document text.</param>
            <param name="moniker">Document moniker that uniquely identifies this document.</param>
            <param name="ensureWritableHandler">Queries whether the document is allowed to be written.</param>
        </member>
        <member name="M:JetBrains.DocumentManagers.impl.StandaloneShellDocument.MakeReadonly(JetBrains.Util.TextRange)">
            <summary>
            Locks a document range temporarily to prevent it from being edited. To unlock, dispose of the return value.
            </summary>
        </member>
        <member name="P:JetBrains.DocumentManagers.impl.StandaloneShellDocument.Moniker">
            <summary>
            Gets the document moniker (an arbitrary string that helps with identifying this document).
            </summary>
        </member>
        <member name="T:JetBrains.DocumentManagers.VsDocumentBase">
            <summary>
            A flavor of <see cref="T:JetBrains.DocumentModel.Impl.DocumentBase"/> that is aware of project files and solutions and can thus implement additional checks.
            </summary>
        </member>
        <member name="T:JetBrains.DocumentManagers.DocumentManager">
            <summary>
            Manages file-based documents that are backed with <see cref="T:JetBrains.ProjectModel.IProjectFile"/>s.
            Simple in-memory documents can be created with <see cref="T:JetBrains.DocumentModel.ShellDocumentFactory"/> and used independently of this class.
            </summary>
        </member>
        <member name="M:JetBrains.DocumentManagers.DocumentManager.GetDocument(JetBrains.ProjectModel.IProjectFile)">
            <summary>
            Gets document by project item.
            </summary>
        </member>
        <member name="M:JetBrains.DocumentManagers.DocumentManager.GetProjectFile(JetBrains.DocumentModel.IDocument)">
            <summary>
            Gets project item by document item.
            </summary>
        </member>
        <member name="M:JetBrains.DocumentManagers.DocumentManager.GetUnsavedDocuments">
            <summary>
            Returns all unsaved documents.
            </summary>
        </member>
        <member name="M:JetBrains.DocumentManagers.DocumentManager.IsDocumentUnsaved(JetBrains.DocumentModel.IDocument)">
            <summary>
            Returns true if the specified document has not been saved since the last modification
            </summary>
        </member>
        <member name="M:JetBrains.DocumentManagers.DocumentManager.SaveAllDocuments">
            <summary>
            Saves all documents 
            </summary>
        </member>
        <member name="M:JetBrains.DocumentManagers.DocumentManager.SaveDocument(JetBrains.DocumentModel.IDocument)">
            <summary>
            Saves the specified document
            </summary>
        </member>
        <member name="E:JetBrains.DocumentManagers.DocumentManager.AfterDocumentSaved">
            <summary>
            Raised after a document has been saved.
            </summary>
        </member>
        <member name="E:JetBrains.DocumentManagers.DocumentManager.BeforeDocumentChanged">
            <summary>
            Fires before a document is modified.
            Aggregates the <see cref="E:JetBrains.DocumentModel.IDocument.BeforeDocumentChanged"/> event on all the documents.
            </summary>
        </member>
        <member name="E:JetBrains.DocumentManagers.DocumentManager.BeforeDocumentCopyChanged">
            <summary>
            Fires before a document is modified.
            Aggregates the <see cref="E:JetBrains.DocumentModel.IDocument.BeforeDocumentChanged"/> event on all the documents.
            </summary>
        </member>
        <member name="E:JetBrains.DocumentManagers.DocumentManager.BeforeDocumentReloaded">
            <summary>
            Raised before a document has been changed externally. The handlers of this event are given a chance to
            cancel the external change.
            </summary>
        </member>
        <member name="E:JetBrains.DocumentManagers.DocumentManager.BeforeDocumentSaved">
            <summary>
            Raised before a document has been saved. The handlers of this event are given a chance to
            cancel save.
            </summary>
        </member>
        <member name="M:JetBrains.DocumentManagers.DocumentManagerExtensions.EnsureWritable(JetBrains.DocumentManagers.DocumentManager,JetBrains.DocumentModel.IDocument,System.Action{JetBrains.Util.ModificationCookie})">
            <summary>
            Get clearance for write access to the docment, for example, at the Source Code Control.
            You MUST scope file-based-document modifications with this method.
            </summary>
        </member>
        <member name="M:JetBrains.DocumentManagers.DocumentManagerExtensions.EnsureWritableSuccess(JetBrains.DocumentManagers.DocumentManager,JetBrains.DocumentModel.IDocument,System.Action)">
            <summary>
            Get clearance for write access to the docment, for example, at the Source Code Control.
            Executes the <paramref name="FIfSucceeded"/> action only if the modification query succeeds (<see cref="P:JetBrains.Util.ModificationCookie.EnsureWritableResult"/> is <see cref="F:JetBrains.Util.EnsureWritableResult.SUCCESS"/>).
            You MUST scope file-based-document modifications with this method.
            </summary>
        </member>
        <member name="F:JetBrains.DocumentManagers.impl.DocumentManagerImpl.OptionDontAssertNonVsDocumentModifications">
            <summary>
            Limits <see cref="M:JetBrains.DocumentManagers.impl.DocumentManagerImpl.AssertOnFileBasedDocumentModification(JetBrains.DocumentModel.Impl.DocumentBase,JetBrains.ProjectModel.IProjectFile)"/> for legacy code.
            </summary>
        </member>
        <member name="M:JetBrains.DocumentManagers.impl.DocumentManagerImpl.SynchronizeDocumentContentsWithFile(JetBrains.DocumentModel.IDocument)">
            <summary>
            Forces synchronizing the document with its content source.
            For standalone documents or VS documents not opened in the editor, these are external files.
            For open VS documents, this is the RDT document content.
            Requires a writer lock.
            </summary>
        </member>
        <member name="M:JetBrains.DocumentManagers.impl.DocumentManagerImpl.GetProjectFileSyncObject(JetBrains.ProjectModel.IProjectFile)">
            <summary>
            Gets an object to synchronize access to a project file.
            </summary>
        </member>
        <member name="M:JetBrains.DocumentManagers.impl.DocumentManagerImpl.SynchronizeDocumentContentsWithFile_Standalone(JetBrains.DocumentModel.IDocument)">
            <summary>
            Implements the standalone case for <see cref="M:JetBrains.DocumentManagers.impl.DocumentManagerImpl.SynchronizeDocumentContentsWithFile(JetBrains.DocumentModel.IDocument)"/>.
            </summary>
        </member>
        <member name="M:JetBrains.DocumentManagers.impl.DocumentManagerImpl.AssertOnFileBasedDocumentModification(JetBrains.DocumentModel.Impl.DocumentBase,JetBrains.ProjectModel.IProjectFile)">
            <summary>
            When a file-based document is modified, asserts that it's allowed.
            </summary>
        </member>
        <member name="M:JetBrains.DocumentManagers.impl.DocumentManagerImpl.GetDocument(JetBrains.ProjectModel.IProjectFile)">
            <summary>
            Gets document by project item.
            </summary>
        </member>
        <member name="M:JetBrains.DocumentManagers.impl.DocumentManagerImpl.CreateDocument(JetBrains.ProjectModel.IProjectFile)">
            <summary>
            Achtung! Creates a new document each time! Don't use but from <see cref="M:JetBrains.DocumentManagers.impl.DocumentManagerImpl.GetDocument(JetBrains.ProjectModel.IProjectFile)"/>.
            Implementation does not need to register in the project-file-to-document map.
            Mind that your document will normally be held on a weak ref.
            </summary>
        </member>
        <member name="M:JetBrains.DocumentManagers.impl.StandaloneDocument.MakeReadonly(JetBrains.Util.TextRange)">
            <summary>
            Locks a document range temporarily to prevent it from being edited. To unlock, dispose of the return value.
            </summary>
        </member>
        <member name="P:JetBrains.DocumentManagers.impl.StandaloneDocument.Moniker">
            <summary>
            Gets the document moniker (an arbitrary string that helps with identifying this document).
            </summary>
        </member>
        <member name="T:JetBrains.DocumentManagers.RangeMarker">
            <summary>
            Implementation of the <see cref="T:JetBrains.DocumentModel.IRangeMarker"/> interface.
            </summary>
        </member>
        <member name="F:JetBrains.DocumentManagers.RangeMarker.myRangeBeforeTransaction">
            <summary>
            Stores range before transaction.
            </summary>
        </member>
        <member name="F:JetBrains.DocumentManagers.RangeMarker.myIsValid">
            <summary>
            Indicates whether the range marker is valid or not
            </summary>
        </member>
        <member name="F:JetBrains.DocumentManagers.RangeMarker.myIsGreedyToLeft">
            <summary>
            Idicates whether the range marker is greedy to left
            </summary>
        </member>
        <member name="F:JetBrains.DocumentManagers.RangeMarker.myIsGreedyToRight">
            <summary>
            Indicates whether the range marker is greedy to right
            </summary>
        </member>
        <member name="M:JetBrains.DocumentManagers.RangeMarker.DocumentChanged(JetBrains.DocumentModel.DocumentChange)">
            <summary>
            Handles document modifications
            </summary>
        </member>
        <member name="M:JetBrains.DocumentManagers.RangeMarker.NotifyDocumentChanged(JetBrains.DocumentModel.DocumentChange,System.Int32)">
            <summary>
            Notifies a range marker about document change
            </summary>
        </member>
        <member name="P:JetBrains.DocumentManagers.RangeMarker.IsValid">
            <summary>
            Gets or set a value indicating whether the range marker is valid
            <remarks>Setting works only for invalidating marker</remarks>
            </summary>
        </member>
    </members>
</doc>
