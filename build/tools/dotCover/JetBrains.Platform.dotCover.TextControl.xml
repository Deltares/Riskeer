<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JetBrains.Platform.dotCover.TextControl</name>
    </assembly>
    <members>
        <member name="T:JetBrains.TextControl.Actions.TextControlActions">
            <summary>
            TODO: review, try to make a common model of VS typing handling and text control impl actions.
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.CaretVisualPlacement">
            <summary>
            After positioning the caret in the document, scrolls the text control to reveal the caret position.
            This affects the visual location of the caret after scrolling.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.CaretVisualPlacement.DontScrollIfVisible">
            <summary>
            Does not do any scrolling if the new caret position is already visible.
            If the caret gets too close to the edge, <see cref="F:JetBrains.TextControl.CaretVisualPlacement.Generic"/> would scroll it away. This mode avoids the effect.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.CaretVisualPlacement.Generic">
            <summary>
            When moving within the active text control, ensures the caret is not too close to the edge with minimal amount of scrolling.
            When jumping to another text control, places the caret at the predefined position.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.CaretVisualPlacement.DirectionalUp">
            <summary>
            When moving within the active text control, works almost as <see cref="F:JetBrains.TextControl.CaretVisualPlacement.Generic"/>, but avoids scrolling the caret away from a too-near edge if this means scrolling against the caret movement direction.
            When jumping to another text control, places the caret at the predefined position consistent with generic scrolling in the given direction within the same text control.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.CaretVisualPlacement.DirectionalDown">
            <summary>
            When moving within the active text control, works almost as <see cref="F:JetBrains.TextControl.CaretVisualPlacement.Generic"/>, but avoids scrolling the caret away from a too-near edge if this means scrolling against the caret movement direction.
            When jumping to another text control, places the caret at the predefined position consistent with generic scrolling in the given direction within the same text control.
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.Coords.ITextControlCoords">
            <summary>
            An entry point to the text control coordinate conversions.
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.Coords.ITextControlPos">
            <summary>
            Represents an abstracted point on the text control that can be converted to any more or less equivalent representation.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.ITextControlPos.ToCanvas">
            <summary>
            Converts the position to canvas coordinates, which are pixel coordinates relative to the (0,0) character in the text view.
            Canvas coordinates of a specific text control character do not change when scrolling.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.ITextControlPos.ToDocLineColumn">
            <summary>
            Converts the position to document line-column coordinates.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.ITextControlPos.ToDocOffset">
            <summary>
            Converts the position to an offset from the beginning of the document text.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.ITextControlPos.ToDocOffsetAndVirtual">
            <summary>
            Converts the position to an offset from the beginning of the document text, plus, if the position represented a point in the editor virtual space, the number of virtual spaces from the last real document character to the addressed position.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.ITextControlPos.ToRetainedPos">
            <summary>
            Normally, an <see cref="T:JetBrains.TextControl.Coords.ITextControlPos"/> starts as a position of a specific kind and calculates the conversions as needed.
            The <see cref="M:JetBrains.TextControl.Coords.ITextControlPos.ToRetainedPos"/> method allows to precalculate all of the positions for the given moment in time, which provides for retaining the values in the <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see> even after the unmanaged text control gets destroyed.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.ITextControlPos.ToScreen">
            <summary>
            Converts the position to screen pixel coordinates.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.ITextControlPos.ToTextControlLineColumn">
            <summary>
            Converts the position to text control line-column coordinates.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.Coords.ITextControlPos.TextControl">
            <summary>
            Gets the text control that will be translating the position to various coordinate systems.
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.Coords.PositionKinds.TextControlPosCanvas">
            <summary>
            Coordinate conversion from canvas pixel coordinates.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.PositionKinds.TextControlPosCanvas.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param><exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.TextControl.Coords.PositionKinds.TextControlPosCanvas.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.TextControl.Coords.PositionKinds.TextControlPosCanvas.Equals(JetBrains.TextControl.Coords.ITextControlPos)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="iother"/> parameter; otherwise, false.
            </returns>
            <param name="iother">An object to compare with this object.</param>
        </member>
        <member name="M:JetBrains.TextControl.Coords.PositionKinds.TextControlPosCanvas.JetBrains#TextControl#Coords#ITextControlPos#ToRetainedPos">
            <summary>
            Normally, an <see cref="T:JetBrains.TextControl.Coords.ITextControlPos"/> starts as a position of a specific kind and calculates the conversions as needed.
            The <see cref="M:JetBrains.TextControl.Coords.ITextControlPos.ToRetainedPos"/> method allows to precalculate all of the positions for the given moment in time, which provides for retaining the values in the <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see> even after the unmanaged text control gets destroyed.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.Coords.PositionKinds.TextControlPosCanvas.JetBrains#TextControl#Coords#ITextControlPos#TextControl">
            <summary>
            Gets the text control that will be translating the position to various coordinate systems.
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.Coords.PositionKinds.TextControlPosDocLineColumn">
            <summary>
            Coordinate conversion from document line/column coordinates.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.PositionKinds.TextControlPosDocLineColumn.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param><exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.TextControl.Coords.PositionKinds.TextControlPosDocLineColumn.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.TextControl.Coords.PositionKinds.TextControlPosDocLineColumn.Equals(JetBrains.TextControl.Coords.ITextControlPos)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="iother"/> parameter; otherwise, false.
            </returns>
            <param name="iother">An object to compare with this object.</param>
        </member>
        <member name="M:JetBrains.TextControl.Coords.PositionKinds.TextControlPosDocLineColumn.JetBrains#TextControl#Coords#ITextControlPos#ToRetainedPos">
            <summary>
            Normally, an <see cref="T:JetBrains.TextControl.Coords.ITextControlPos"/> starts as a position of a specific kind and calculates the conversions as needed.
            The <see cref="M:JetBrains.TextControl.Coords.ITextControlPos.ToRetainedPos"/> method allows to precalculate all of the positions for the given moment in time, which provides for retaining the values in the <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see> even after the unmanaged text control gets destroyed.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.Coords.PositionKinds.TextControlPosDocLineColumn.JetBrains#TextControl#Coords#ITextControlPos#TextControl">
            <summary>
            Gets the text control that will be translating the position to various coordinate systems.
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.Coords.PositionKinds.TextControlPosDocOffsetAndVirtual">
            <summary>
            Coordinate conversion from document offset with virtual space.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.PositionKinds.TextControlPosDocOffsetAndVirtual.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param><exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.TextControl.Coords.PositionKinds.TextControlPosDocOffsetAndVirtual.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.TextControl.Coords.PositionKinds.TextControlPosDocOffsetAndVirtual.Equals(JetBrains.TextControl.Coords.ITextControlPos)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="iother"/> parameter; otherwise, false.
            </returns>
            <param name="iother">An object to compare with this object.</param>
        </member>
        <member name="M:JetBrains.TextControl.Coords.PositionKinds.TextControlPosDocOffsetAndVirtual.JetBrains#TextControl#Coords#ITextControlPos#ToRetainedPos">
            <summary>
            Normally, an <see cref="T:JetBrains.TextControl.Coords.ITextControlPos"/> starts as a position of a specific kind and calculates the conversions as needed.
            The <see cref="M:JetBrains.TextControl.Coords.ITextControlPos.ToRetainedPos"/> method allows to precalculate all of the positions for the given moment in time, which provides for retaining the values in the <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see> even after the unmanaged text control gets destroyed.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.Coords.PositionKinds.TextControlPosDocOffsetAndVirtual.JetBrains#TextControl#Coords#ITextControlPos#TextControl">
            <summary>
            Gets the text control that will be translating the position to various coordinate systems.
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.Coords.PositionKinds.TextControlPosRetained">
            <summary>
            Stores a retained coordinate snapshot.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.Coords.PositionKinds.TextControlPosRetained.OptionDontRetainPixels">
            <summary>
            Allows to exclude <see cref="!:ToScreen"/> and <see cref="!:ToCanvas"/> pixel coordinates from precalculation.
            <see cref="T:JetBrains.TextControl.Coords.PositionKinds.TextControlPosRetained"/>-type properties won't be reliable on change regarding these, but each calculation won't be so slow.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.Coords.PositionKinds.TextControlPosRetained.myPosOriginal">
            <summary>
            The position from which this retained position has been created by pre-calculating all of the transformations.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.PositionKinds.TextControlPosRetained.#ctor(JetBrains.TextControl.Coords.ITextControlPos)">
            <summary>
            Creates a snapshot of all the <paramref name="pos"/> aspects.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.PositionKinds.TextControlPosRetained.#ctor(JetBrains.TextControl.ITextControl)">
            <summary>
            Only for <see cref="M:JetBrains.TextControl.Coords.PositionKinds.TextControlPosRetained.CreateEmpty(JetBrains.TextControl.ITextControl)"/>.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.PositionKinds.TextControlPosRetained.CreateEmpty(JetBrains.TextControl.ITextControl)">
            <summary>
            Creates an all-<c>Null</c> position. Text control must be specified in any case.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.PositionKinds.TextControlPosRetained.Freeze(JetBrains.TextControl.Coords.ITextControlPos)">
            <summary>
            Creates a snapshot of all the <paramref name="pos"/> aspects.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.PositionKinds.TextControlPosRetained.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param><exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.TextControl.Coords.PositionKinds.TextControlPosRetained.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.TextControl.Coords.PositionKinds.TextControlPosRetained.Equals(JetBrains.TextControl.Coords.ITextControlPos)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="iother"/> parameter; otherwise, false.
            </returns>
            <param name="iother">An object to compare with this object.</param>
        </member>
        <member name="M:JetBrains.TextControl.Coords.PositionKinds.TextControlPosRetained.JetBrains#TextControl#Coords#ITextControlPos#ToCanvas">
            <summary>
            Converts the position to canvas coordinates, which are pixel coordinates relative to the (0,0) character in the text view.
            Canvas coordinates of a specific text control character do not change when scrolling.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.PositionKinds.TextControlPosRetained.JetBrains#TextControl#Coords#ITextControlPos#ToDocLineColumn">
            <summary>
            Converts the position to document line-column coordinates.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.PositionKinds.TextControlPosRetained.JetBrains#TextControl#Coords#ITextControlPos#ToDocOffset">
            <summary>
            Converts the position to an offset from the beginning of the document text.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.PositionKinds.TextControlPosRetained.JetBrains#TextControl#Coords#ITextControlPos#ToDocOffsetAndVirtual">
            <summary>
            Converts the position to an offset from the beginning of the document text, plus, if the position represented a point in the editor virtual space, the number of virtual spaces from the last real document character to the addressed position.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.PositionKinds.TextControlPosRetained.JetBrains#TextControl#Coords#ITextControlPos#ToRetainedPos">
            <summary>
            Normally, an <see cref="T:JetBrains.TextControl.Coords.ITextControlPos"/> starts as a position of a specific kind and calculates the conversions as needed.
            The <see cref="M:JetBrains.TextControl.Coords.ITextControlPos.ToRetainedPos"/> method allows to precalculate all of the positions for the given moment in time, which provides for retaining the values in the <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see> even after the unmanaged text control gets destroyed.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.PositionKinds.TextControlPosRetained.JetBrains#TextControl#Coords#ITextControlPos#ToScreen">
            <summary>
            Converts the position to screen pixel coordinates.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.PositionKinds.TextControlPosRetained.JetBrains#TextControl#Coords#ITextControlPos#ToTextControlLineColumn">
            <summary>
            Converts the position to text control line-column coordinates.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.Coords.PositionKinds.TextControlPosRetained.JetBrains#TextControl#Coords#ITextControlPos#TextControl">
            <summary>
            Gets the text control that will be translating the position to various coordinate systems.
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.Coords.PositionKinds.TextControlPosScreen">
            <summary>
            Coordinate conversion from screen pixel coordinates.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.PositionKinds.TextControlPosScreen.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param><exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.TextControl.Coords.PositionKinds.TextControlPosScreen.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.TextControl.Coords.PositionKinds.TextControlPosScreen.Equals(JetBrains.TextControl.Coords.ITextControlPos)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="iother"/> parameter; otherwise, false.
            </returns>
            <param name="iother">An object to compare with this object.</param>
        </member>
        <member name="M:JetBrains.TextControl.Coords.PositionKinds.TextControlPosScreen.JetBrains#TextControl#Coords#ITextControlPos#ToRetainedPos">
            <summary>
            Normally, an <see cref="T:JetBrains.TextControl.Coords.ITextControlPos"/> starts as a position of a specific kind and calculates the conversions as needed.
            The <see cref="M:JetBrains.TextControl.Coords.ITextControlPos.ToRetainedPos"/> method allows to precalculate all of the positions for the given moment in time, which provides for retaining the values in the <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see> even after the unmanaged text control gets destroyed.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.Coords.PositionKinds.TextControlPosScreen.JetBrains#TextControl#Coords#ITextControlPos#TextControl">
            <summary>
            Gets the text control that will be translating the position to various coordinate systems.
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.Coords.PositionKinds.TextControlPosTextControlLineColumn">
            <summary>
            Coordinate conversion from text control line/column coordinates.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.PositionKinds.TextControlPosTextControlLineColumn.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param><exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.TextControl.Coords.PositionKinds.TextControlPosTextControlLineColumn.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.TextControl.Coords.PositionKinds.TextControlPosTextControlLineColumn.Equals(JetBrains.TextControl.Coords.ITextControlPos)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="iother"/> parameter; otherwise, false.
            </returns>
            <param name="iother">An object to compare with this object.</param>
        </member>
        <member name="M:JetBrains.TextControl.Coords.PositionKinds.TextControlPosTextControlLineColumn.JetBrains#TextControl#Coords#ITextControlPos#ToRetainedPos">
            <summary>
            Normally, an <see cref="T:JetBrains.TextControl.Coords.ITextControlPos"/> starts as a position of a specific kind and calculates the conversions as needed.
            The <see cref="M:JetBrains.TextControl.Coords.ITextControlPos.ToRetainedPos"/> method allows to precalculate all of the positions for the given moment in time, which provides for retaining the values in the <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see> even after the unmanaged text control gets destroyed.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.Coords.PositionKinds.TextControlPosTextControlLineColumn.JetBrains#TextControl#Coords#ITextControlPos#TextControl">
            <summary>
            Gets the text control that will be translating the position to various coordinate systems.
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.Coords.TextControlCoordinateConversionCore">
            <summary>
            Implements the few methods that make it possible to implement the multitude of conversions supported by <see cref="T:JetBrains.TextControl.Coords.ITextControlCoords"/>-<see cref="T:JetBrains.TextControl.Coords.ITextControlPos"/>.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.TextControlCoordinateConversionCore.#ctor(JetBrains.TextControl.ITextControl)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.TextControlCoordinateConversionCore.Canvas_To_TextControlLineColumn(JetBrains.TextControl.Graphics.PointEx)">
            <summary>
            Conversion method.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.TextControlCoordinateConversionCore.DocLineColumn_To_DocOffset(JetBrains.DocumentModel.DocumentCoords)">
            <summary>
            Standard implementation that uses platform doc line index.
            May be out of sync with VS model at times.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.TextControlCoordinateConversionCore.DocLineColumn_To_TextControlLineColumn(JetBrains.DocumentModel.DocumentCoords)">
            <summary>
            Conversion method.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.TextControlCoordinateConversionCore.DocOffset_To_DocLineColumn(JetBrains.TextControl.DocOffsetAndVirtual)">
            <summary>
            Standard implementation that uses platform doc line index.
            May be out of sync with VS model at times.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.TextControlCoordinateConversionCore.DocOffset_To_TextControlLineColumn(JetBrains.TextControl.DocOffsetAndVirtual)">
            <summary>
            Conversion method.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.TextControlCoordinateConversionCore.Screen_To_TextControlLineColumn(System.Drawing.Point)">
            <summary>
            Conversion method.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.TextControlCoordinateConversionCore.TextControlLineColumn_To_Canvas(JetBrains.TextControl.TextControlLineColumn)">
            <summary>
            Conversion method.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.TextControlCoordinateConversionCore.TextControlLineColumn_To_DocLineColumn(JetBrains.TextControl.TextControlLineColumn)">
            <summary>
            Conversion method.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.TextControlCoordinateConversionCore.TextControlLineColumn_To_DocOffset(JetBrains.TextControl.TextControlLineColumn)">
            <summary>
            Conversion method.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.TextControlCoordinateConversionCore.TextControlLineColumn_To_Screen(JetBrains.TextControl.TextControlLineColumn)">
            <summary>
            Conversion method.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.TextControlCoordinateConversionCore.GetViewportLocation">
            <summary>
            Location of the viewport within the canvas coord space. Ie scrolling position.
            For transitions between canvas and viewport coords.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.TextControlCoordinateConversionCore.Screen_To_Viewport(System.Drawing.Point)">
            <summary>
            Helper conversion for deriving screen conversions from canvas ones.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.TextControlCoordinateConversionCore.Viewport_To_Screen(System.Drawing.Point)">
            <summary>
            Helper conversion for deriving screen conversions from canvas ones.
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.Coords.TextControlCoords">
            <summary>
            Implements the creation of <see cref="T:JetBrains.TextControl.Coords.ITextControlPos"/> from various sources.
            Supply with the conversion core.
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.Coords.TextControlPosRange">
            <summary>
            Defines a range between two <see cref="T:JetBrains.TextControl.Coords.ITextControlPos"/>.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.Coords.TextControlPosRange.End">
            <summary>
            Range end. This position belongs to <see cref="F:JetBrains.TextControl.Coords.TextControlPosRange.TextControl"/>.
            Note that it's not guaranteed that <see cref="F:JetBrains.TextControl.Coords.TextControlPosRange.Start"/> goes before <see cref="F:JetBrains.TextControl.Coords.TextControlPosRange.End"/>.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.Coords.TextControlPosRange.Start">
            <summary>
            Range start. This position belongs to <see cref="F:JetBrains.TextControl.Coords.TextControlPosRange.TextControl"/>.
            Note that it's not guaranteed that <see cref="F:JetBrains.TextControl.Coords.TextControlPosRange.Start"/> goes before <see cref="F:JetBrains.TextControl.Coords.TextControlPosRange.End"/>.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.Coords.TextControlPosRange.TextControl">
            <summary>
            Both <see cref="F:JetBrains.TextControl.Coords.TextControlPosRange.Start"/> and <see cref="F:JetBrains.TextControl.Coords.TextControlPosRange.End"/> belong to this text control.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.TextControlPosRange.FromDocLineColumnRange(JetBrains.TextControl.ITextControl,JetBrains.DocumentModel.DocLineColumnRange)">
            <summary>
            Creates a text control range in universal positions based on the document range.
            </summary>
            <param name="textcontrol">The text control that will be used for translating the range into the text control coordinate space.</param>
            <param name="range">The range, in document coordinates.</param>
            <returns>Text control range in universal coordinates.</returns>
        </member>
        <member name="M:JetBrains.TextControl.Coords.TextControlPosRange.FromDocRange(JetBrains.TextControl.ITextControl,JetBrains.Util.TextRange)">
            <summary>
            Creates a text control range in universal positions based on the document range. See also the <see cref="!:FromDocRange(JetBrains.TextControl.EditBoxTextControl.EditBoxTextControl,int,int)"/> overload that supports unnormalized ranges.
            </summary>
            <param name="textcontrol">The text control that will be used for translating the range into the text control coordinate space.</param>
            <param name="range">The range, in document coordinates.</param>
            <returns>Text control range in universal coordinates.</returns>
        </member>
        <member name="M:JetBrains.TextControl.Coords.TextControlPosRange.FromDocRange(JetBrains.TextControl.ITextControl,System.Int32,System.Int32)">
            <summary>
            Creates a text control range in universal positions based on the document range. Unlike the <see cref="M:JetBrains.TextControl.Coords.TextControlPosRange.FromDocRange(JetBrains.TextControl.ITextControl,JetBrains.Util.TextRange)"/> overload, accepts unnormalized ranges.
            </summary>
            <param name="textcontrol">The text control that will be used for translating the range into the text control coordinate space.</param>
            <param name="start">The range start, in document coordinates.</param>
            <param name="end">The range end, in document coordinates.</param>
            <returns>Text control range in universal coordinates.</returns>
        </member>
        <member name="M:JetBrains.TextControl.Coords.TextControlPosRange.FromTextControlLineCol(JetBrains.TextControl.ITextControl,JetBrains.VsIntegration.TextControl.TextControlLineColumnRange)">
            <summary>
            Creates a text control range in universal positions based on the text control line-col coordinates.
            </summary>
            <param name="textcontrol">The text control that will be used for translating the range into the text control coordinate space.</param>
            <param name="range">The range, in text control line-col coordinates.</param>
            <returns>Text control range in universal coordinates.</returns>
        </member>
        <member name="M:JetBrains.TextControl.Coords.TextControlPosRange.ToDocLineColumnRangeNormalized">
            <summary>
            Converts both ends to the document range.
            Normalizes the range, so that the start goes before the end.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.TextControlPosRange.ToDocLineColumnRangeUnnormalized">
            <summary>
            Converts both ends to the document range.
            Does not normalize the range, the start might go after the end.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.TextControlPosRange.ToDocRangeNormalized">
            <summary>
            Converts both ends to the document range.
            Makes sure the range is properly normalized, ie the start goes before the end. Raw ranges of the document selection, for instance, might be inverted if user selects with shift+left.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.TextControlPosRange.ToRetained">
            <summary>
            Normally, an <see cref="T:JetBrains.TextControl.Coords.ITextControlPos"/> starts as a position of a specific kind and calculates the conversions as needed.
            The <see cref="M:JetBrains.TextControl.Coords.TextControlPosRange.ToRetained"/> method allows to precalculate all of the positions for the given moment in time, which provides for retaining the values in the <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see> even after the unmanaged text control gets destroyed.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.TextControlPosRange.ToTextControlLineColumnRangeNormalized">
            <summary>
            Converts both ends to the text control line-column range.
            Normalizes the range, so that the start goes before the end.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.TextControlPosRange.ToTextControlLineColumnRangeUnnormalized">
            <summary>
            Converts both ends to the text control line-column range.
            Does not normalize the range, the start might go after the end.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.TextControlPosRange.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param><exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.TextControl.Coords.TextControlPosRange.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.TextControl.Coords.TextControlPosRange.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.TextControl.Coords.TextControlPosRange.Equals(JetBrains.TextControl.Coords.TextControlPosRange)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="T:JetBrains.TextControl.CreateTextControlParams`1">
            <summary>
            Params for <see cref="M:JetBrains.TextControl.ITextControlManager.CreateTextControl``1(JetBrains.TextControl.CreateTextControlParams{``0})"/>. See concrete inheritors for available text control types.
            </summary>
            <typeparam name="TTextControl">Type of the text control.</typeparam>
        </member>
        <member name="M:JetBrains.TextControl.CreateTextControlParams`1.#ctor(JetBrains.DocumentModel.IDocument,JetBrains.UI.WindowManagement.WindowFrame)">
             <summary>
             Makes params.
             </summary>
             <param name="document">
               The document for which the text control should be created.
            </param>
             <param name="frame">The frame that hosts the text control.</param>
        </member>
        <member name="F:JetBrains.TextControl.CreateTextControlParams`1.Document">
            <summary>
            The document for the new text control.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.CreateTextControlParams`1.Frame">
            <summary>
            The frame hosting the new text control.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.CreateTextControlParams`1.TextControlType">
            <summary>
            Type of the text control to create.
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.CreateWinFormsTextControlParams">
            <summary>
            Creates a homebrew WinForms text control of type <see cref="T:JetBrains.TextControl.IWinFormTextControl"/>.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.CreateWinFormsTextControlParams.#ctor(JetBrains.DocumentModel.IDocument,JetBrains.UI.WindowManagement.WindowFrame,JetBrains.TextControl.TextControlScheme,JetBrains.TextControl.ISyntaxHighlighting)">
            <summary>
            Makes params.
            </summary>
            <param name="document">The document for which the text control should be created.</param>
            <param name="scheme">Scheme. Use <c>DefaultTextControlSchemeManager.Instance.GetScheme()</c> as the default.</param>
            <param name="hilite">Highlighting. Use <c>Null</c> as the default.</param>
            <param name="frame">Frame hosting the text control.</param>
        </member>
        <member name="M:JetBrains.TextControl.CreateWinFormsTextControlParams.#ctor(JetBrains.DocumentModel.IDocument,JetBrains.UI.WindowManagement.WindowFrame)">
            <summary>
            Makes params.
            </summary>
            <param name="document">The document for which the text control should be created.</param>
            <param name="frame">Frame hosting the text control.</param>
        </member>
        <member name="M:JetBrains.TextControl.CreateWinFormsTextControlParams.#ctor(JetBrains.DocumentModel.IDocument)">
            <summary>
            Creates the text control for the document, using the default scheme and highlighting.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Data.RangeableContainer`2.EnsureUpdated">
            <summary>
            Make the container updated for the recent document change, and return if the futher container modification should be reflected in <see cref="F:JetBrains.TextControl.Data.RangeableContainer`2.myDocumentChangeData"/>
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.DocOffsetAndVirtual">
            <summary>
            <para>Represents the (<see cref="P:JetBrains.TextControl.DocOffsetAndVirtual.Offset"/>) in a text <see cref="T:JetBrains.DocumentModel.IDocument">document</see>, which is basically a document offset.</para>
            <para>However, this position is often derived from a <see cref="T:JetBrains.TextControl.TextControlLineColumn"/>, which is in the text control Line-Column coordinate system, and not all column indices map into document offsets. If the column index is beyond the EOL of that line, then it's said to be in the Virtual Space. <see cref="P:JetBrains.TextControl.DocOffsetAndVirtual.TextControlVirtualDelta"/> is the offset into the Virtual Space from the nearest valid document <see cref="P:JetBrains.TextControl.DocOffsetAndVirtual.Offset"/>.</para>
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.DocOffsetAndVirtual.myNeutralVirtualDelta">
            <summary>
            Number of virtual columns past the last real document position.
            Neutral means that it is equally presented in document and text control columns (<see cref="P:JetBrains.TextControl.DocOffsetAndVirtual.TextControlVirtualDelta"/>, <see cref="P:JetBrains.TextControl.DocOffsetAndVirtual.DocVirtualDelta"/>).
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.DocOffsetAndVirtual.#ctor(System.Int32,JetBrains.Util.dataStructures.TypedIntrinsics.Int32{JetBrains.TextControl.TextControlColumn})">
            <summary>
            Creates an offset that represents some point within the text control's virtual space.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.DocOffsetAndVirtual.#ctor(System.Int32,JetBrains.Util.dataStructures.TypedIntrinsics.Int32{JetBrains.DocumentModel.DocColumn})">
            <summary>
            Creates an offset that represents some point within the text control's virtual space.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.DocOffsetAndVirtual.#ctor(System.Int32)">
            <summary>
            Creates an offset that corresponds to a real document offset, without any shift to the virtual space.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.DocOffsetAndVirtual.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <returns>
            true if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
            <param name="obj">Another object to compare to. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.TextControl.DocOffsetAndVirtual.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.TextControl.DocOffsetAndVirtual.DocVirtualDelta">
            <summary>
            For logical positions over actual document characters this is zero. For logical positions over the Virtual Space (column indices beyond the end of line), the number of virtual space characters from the EOL.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.DocOffsetAndVirtual.IsInVirtualSpace">
            <summary>
            Gets whether the point isn't over document chars, but somewhere in the virtual space of the text control.
            This means that <see cref="P:JetBrains.TextControl.DocOffsetAndVirtual.DocVirtualDelta"/> and <see cref="P:JetBrains.TextControl.DocOffsetAndVirtual.TextControlVirtualDelta"/> are both above zero.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.DocOffsetAndVirtual.Offset">
            <summary>
            For logical positions over actual document characters, the <see cref="T:JetBrains.DocumentModel.IDocument">document</see> offset. For logical positions over the Virtual Space (column indices beyond the end of line), the EOL offset.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.DocOffsetAndVirtual.TextControlVirtualDelta">
            <summary>
            For logical positions over actual document characters this is zero. For logical positions over the Virtual Space (column indices beyond the end of line), the number of virtual space characters from the EOL.
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.EditBoxTextControl.CreateEditBoxTextControlParams">
            <summary>
            Creates an editbox-based text control of type <see cref="T:JetBrains.TextControl.IWinFormTextControl"/>.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.EditBoxTextControl.CreateEditBoxTextControlParams.#ctor(JetBrains.DocumentModel.IDocument,JetBrains.UI.WindowManagement.WindowFrame)">
             <summary>
             Makes params.
             </summary>
             <param name="document">
               The document for which the text control should be created.
            </param>
             <param name="frame"></param>
             
        </member>
        <member name="T:JetBrains.TextControl.EditBoxTextControl.EditBoxTextControl">
            <summary>
            A lightweight text control based on a Windows Edit Box for use in dialogs.
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.ITextControl">
            <summary>
            Represents the text control, which is a view for editing an <see cref="T:JetBrains.DocumentModel.IDocument"/>.
            Most calls that modify the text control state must be made from the UI thread.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.ITextControl.EmulateEnter">
            <summary>
            Emulates pressing the Enter key in text control. Will cause our and host handlers to be executed. The handler will be executed in a reentrancy-safe context.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.ITextControl.EmulateTyping(System.Char)">
            <summary>
            Emulates typing in text control. Will cause our and host handlers to be executed. The handler will be executed in a reentrancy-safe context.
            </summary>
            <param name="c">The character to amulate typing of.</param>
        </member>
        <member name="M:JetBrains.TextControl.ITextControl.IsPositionInTextView(JetBrains.TextControl.Coords.ITextControlPos)">
            <summary>
            Gets whether the given document position is present in the text view of the text control.
            </summary>
            <param name="position">The document position in the unified position format (<see cref="P:JetBrains.TextControl.ITextControl.Coords"/>.<see cref="M:JetBrains.TextControl.Coords.ITextControlCoords.FromDocOffset(System.Int32)"/> or <see cref="P:JetBrains.TextControl.ITextControl.Coords"/>.<see cref="M:JetBrains.TextControl.Coords.ITextControlCoords.FromDocLineColumn(JetBrains.DocumentModel.DocumentCoords)"/>).</param>
            <remarks>Even though every position could be converted to a text view (and usually a reasonable value will be returned), sometimes that would be only an approximate position (that would not roundtrip). For example, a document position could be hidden from the text view by a collapsed region.</remarks>
        </member>
        <member name="P:JetBrains.TextControl.ITextControl.Caret">
            <summary>
            Caret access.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.ITextControl.Coords">
            <summary>
            <para>Provides access to the text control coordinate conversion, which makes it possible to represent a point on the text control or in the document in a unified way.</para>
            <para>The rendered text gets from the <see cref="P:JetBrains.TextControl.ITextControl.Document">document</see>, however, it might be transformed or filtered (eg projections and collapsed regions).</para>
            <para>That's why document line-column positions (<see cref="T:JetBrains.DocumentModel.DocumentCoords"/>) do not always agree to the text control line-column positions (<see cref="T:JetBrains.TextControl.TextControlLineColumn"/>). Currently, these coordinates have different CLR types and are not so easily mixed together.</para>
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.ITextControl.Disposables">
            <summary>
            Gets the Disposables collection that controls the text control lifetime.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.ITextControl.Document">
            <summary>
            <para>Gets the document that supplies this text control with content.</para>
            <para>The rendered text gets from the document, however, it might be transformed or filtered (eg projections and collapsed regions).</para>
            <para>That's why document line-column positions (<see cref="T:JetBrains.DocumentModel.DocumentCoords"/>) do not always agree to the text control line-column positions (<see cref="T:JetBrains.TextControl.TextControlLineColumn"/>). Currently, these coordinates have different CLR types and are not so easily mixed together.</para>
            Use <see cref="P:JetBrains.TextControl.ITextControl.Coords"/> to convert between various text control coordinates.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.ITextControl.Scrolling">
            <summary>
            Gets the scrolling parameters of the text control, both for quering and manipulating.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.ITextControl.Selection">
            <summary>
            Selection access.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.ITextControl.Window">
            <summary>
            Provides various UI framework-related information about the <see cref="T:JetBrains.TextControl.ITextControl">text control</see>.
            </summary>
        </member>
        <member name="E:JetBrains.TextControl.ITextControl.BeforeDispose">
            <summary>
            Fires when the text control is being disposed of.
            As the text control lifetime is deterministic, you might want to attach to such a point.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.EditBoxTextControl.EditBoxTextControl.SyncToViewGuarded">
            <summary>
            Syncs all the models to the view.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.EditBoxTextControl.EditBoxTextControl.SyncToViewUnguarded">
            <summary>
            Switches to guarded context, calls <see cref="M:JetBrains.TextControl.EditBoxTextControl.EditBoxTextControl.SyncToViewGuarded"/>.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.EditBoxTextControl.EditBoxTextControl.Init_BindToDocument">
            <summary>
            Binds text in the text box to the document text, bidirectionally.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.EditBoxTextControl.EditBoxTextControl.Init_Disposes">
            <summary>
            Behavior on dispose.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.EditBoxTextControl.EditBoxTextControl.IsPositionInTextView(JetBrains.TextControl.Coords.ITextControlPos)">
            <summary>
            Gets whether the given document position is present in the text view of the text control.
            </summary>
            <param name="position">The document position in the unified position format (<see cref="P:JetBrains.TextControl.ITextControl.Coords"/>.<see cref="M:JetBrains.TextControl.Coords.ITextControlCoords.FromDocOffset(System.Int32)"/> or <see cref="P:JetBrains.TextControl.ITextControl.Coords"/>.<see cref="M:JetBrains.TextControl.Coords.ITextControlCoords.FromDocLineColumn(JetBrains.DocumentModel.DocumentCoords)"/>).</param>
            <remarks>Even though every position could be converted to a text view (and usually a reasonable value will be returned), sometimes that would be only an approximate position (that would not roundtrip). For example, a document position could be hidden from the text view by a collapsed region.</remarks>
        </member>
        <member name="M:JetBrains.TextControl.EditBoxTextControl.EditBoxTextControl.System#IDisposable#Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.TextControl.EditBoxTextControl.EditBoxTextControl.JetBrains#TextControl#ITextControl#EmulateEnter">
            <summary>
            Emulates pressing the Enter key in text control. Will cause our and host handlers to be executed. The handler will be executed in a reentrancy-safe context.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.EditBoxTextControl.EditBoxTextControl.JetBrains#TextControl#ITextControl#EmulateTyping(System.Char)">
            <summary>
            Emulates typing in text control. Will cause our and host handlers to be executed. The handler will be executed in a reentrancy-safe context.
            </summary>
            <param name="c">The character to amulate typing of.</param>
        </member>
        <member name="M:JetBrains.TextControl.EditBoxTextControl.EditBoxTextControl.JetBrains#Util#IUserDataHolder#GetData``1(JetBrains.Util.Key{``0})">
            <summary>
            Retrieves value associated with given key.
            Returns null when no value is associated.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.EditBoxTextControl.EditBoxTextControl.JetBrains#Util#IUserDataHolder#PutData``1(JetBrains.Util.Key{``0},``0)">
            <summary>
            Stores given value by specified key.
            Use <code>PutData(key, null)</code> to remove the association.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.EditBoxTextControl.EditBoxTextControl.EditBox">
            <summary>
            Gets the edit box that is the text control.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.EditBoxTextControl.EditBoxTextControl.Document">
            <summary>
            <para>Gets the document that supplies this text control with content.</para>
            <para>The rendered text gets from the document, however, it might be transformed or filtered (eg projections and collapsed regions).</para>
            <para>That's why document line-column positions (<see cref="T:JetBrains.DocumentModel.DocumentCoords"/>) do not always agree to the text control line-column positions (<see cref="T:JetBrains.TextControl.TextControlLineColumn"/>). Currently, these coordinates have different CLR types and are not so easily mixed together.</para>
            Use <see cref="P:JetBrains.TextControl.ITextControl.Coords"/> to convert between various text control coordinates.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.EditBoxTextControl.EditBoxTextControl.JetBrains#TextControl#ITextControl#Caret">
            <summary>
            Caret access.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.EditBoxTextControl.EditBoxTextControl.JetBrains#TextControl#ITextControl#Coords">
            <summary>
            <para>Provides access to the text control coordinate conversion, which makes it possible to represent a point on the text control or in the document in a unified way.</para>
            <para>The rendered text gets from the <see cref="P:JetBrains.TextControl.ITextControl.Document">document</see>, however, it might be transformed or filtered (eg projections and collapsed regions).</para>
            <para>That's why document line-column positions (<see cref="T:JetBrains.DocumentModel.DocumentCoords"/>) do not always agree to the text control line-column positions (<see cref="T:JetBrains.TextControl.TextControlLineColumn"/>). Currently, these coordinates have different CLR types and are not so easily mixed together.</para>
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.EditBoxTextControl.EditBoxTextControl.JetBrains#TextControl#ITextControl#Disposables">
            <summary>
            Gets the Disposables collection that controls the text control lifetime.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.EditBoxTextControl.EditBoxTextControl.JetBrains#TextControl#ITextControl#Scrolling">
            <summary>
            Gets the scrolling parameters of the text control, both for quering and manipulating.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.EditBoxTextControl.EditBoxTextControl.JetBrains#TextControl#ITextControl#Selection">
            <summary>
            Selection access.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.EditBoxTextControl.EditBoxTextControl.JetBrains#TextControl#ITextControl#Window">
            <summary>
            Provides various UI framework-related information about the <see cref="T:JetBrains.TextControl.ITextControl">text control</see>.
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.ITextControlCaret">
            <summary>
            Text control caret access.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.ITextControlCaret.MoveTo(JetBrains.TextControl.Coords.ITextControlPos,JetBrains.TextControl.CaretVisualPlacement)">
            <summary>
            Attempts to move the caret to the requested position.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.ITextControlCaret.Position">
            <summary>
            Gets the caret position in all of the possible text control position representation.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.ITextControlCaret.PositionValue">
            <summary>
            Gets the <see cref="P:JetBrains.TextControl.ITextControlCaret.Position"/> value.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.ITextControlCaret.TextControl">
            <summary>
            Gets the owning text control.
            </summary>
        </member>
        <member name="E:JetBrains.TextControl.ITextControlCaret.CaretMoved">
            <summary>
            <see cref="P:JetBrains.TextControl.ITextControlCaret.Position"/> change event. Use <see cref="P:JetBrains.TextControl.ITextControlCaret.Position"/> directly whenever possible.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.TextControlCaretBase.MoveToCore(JetBrains.TextControl.Coords.ITextControlPos,System.Boolean)">
            <summary>
            Implements moving the caret. Should not affect scrolling. <see cref="M:JetBrains.TextControl.TextControlCaretBase.MoveTo(JetBrains.TextControl.Coords.ITextControlPos,JetBrains.TextControl.CaretVisualPlacement)"/> method default implementation calls this method for the caret positioning part, then applies the scrolling as needed.
            </summary>
            <param name="position">The new caret position. Not prevalidated.</param>
            <param name="bAdvancedScrollMode">Whether the <see cref="M:JetBrains.TextControl.TextControlCaretBase.MoveTo(JetBrains.TextControl.Coords.ITextControlPos,JetBrains.TextControl.CaretVisualPlacement)"/> call has anything but <see cref="F:JetBrains.TextControl.CaretVisualPlacement.DontScrollIfVisible"/> specified as the visual placement parameter. A <c>False</c> value means the “least intrusive” scenario, which could apply to caret placement too.</param>
        </member>
        <member name="M:JetBrains.TextControl.EditBoxTextControl.EditBoxTextControlCoordinateConversion.#ctor(JetBrains.TextControl.EditBoxTextControl.EditBoxTextControl)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.EditBoxTextControl.EditBoxTextControlCoordinateConversion.Screen_To_TextControlLineColumn(System.Drawing.Point)">
            <summary>
            Standard impl based on the <see cref="M:JetBrains.TextControl.Coords.TextControlCoordinateConversionCore.Canvas_To_TextControlLineColumn(JetBrains.TextControl.Graphics.PointEx)"/>.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.EditBoxTextControl.EditBoxTextControlCoordinateConversion.TextControlLineColumn_To_Screen(JetBrains.TextControl.TextControlLineColumn)">
            <summary>
            Standard impl based on the <see cref="M:JetBrains.TextControl.Coords.TextControlCoordinateConversionCore.TextControlLineColumn_To_Canvas(JetBrains.TextControl.TextControlLineColumn)"/>.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.EditBoxTextControl.EditBoxTextControlCoordinateConversion.Screen_To_Viewport(System.Drawing.Point)">
            <summary>
            Helper conversion for deriving screen conversions from canvas ones.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.EditBoxTextControl.EditBoxTextControlCoordinateConversion.Viewport_To_Screen(System.Drawing.Point)">
            <summary>
            Helper conversion for deriving screen conversions from canvas ones.
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.ITextControlScrolling">
            <summary>
            The scrolling parameters of the text control, both for quering and manipulating.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.ITextControlScrolling.ScrollTo(JetBrains.TextControl.Graphics.PointEx)">
            <summary>
            <para>Explicitly sets the viewport position in the canvas (extent) coordinates.</para>
            <para>Even though you can pass pixel coodinates to <see cref="M:JetBrains.TextControl.ITextControlScrolling.ScrollTo(JetBrains.TextControl.Coords.ITextControlPos,JetBrains.TextControl.TextControlScrollType)"/> as well, the difference is that this method does not attempt to adjust the scrolling position for the best visibility of the desired point. The viewport left-top corner is positioned as closely to <paramref name="ptCanvas"/> as possible.</para>
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.ITextControlScrolling.ScrollTo(JetBrains.TextControl.Coords.ITextControlPos,JetBrains.TextControl.TextControlScrollType)">
            <summary>
            Scrolls the view to make the <paramref name="position"/> visible in the viewport, placing it based on the <paramref name="scrollType"/>.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.ITextControlScrolling.TextControl">
            <summary>
            Gets the owning text control.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.ITextControlScrolling.ViewportRange">
            <summary>
            <para>Gets the area that the viewport covers over the extent (the whole imaginary field of the scrollable content whose part is visible in the viewport), in the form of a document or text control range.</para>
            <para>Note that the column number or virtual spaces delta is not applicable to this range because the visible columns set varies with lines. Only lines are taken into account.</para>
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.ITextControlScrolling.ViewportRect">
            <summary>
            Gets the area that the viewport covers over the extent (the whole imaginary field of the scrollable content whose part is visible in the viewport), in canvas pixel coordinates.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.Impl.TextControlScrollingBase.TextControl">
            <summary>
            Gets the owning text control.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.Impl.TextControlScrollingBase.ViewportRange">
            <summary>
            Gets the area that the viewport covers over the extent, in visual coordinates (lines and columns).
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.Impl.TextControlScrollingBase.ViewportRect">
            <summary>
            Gets the area that the viewport covers over the extent, in canvas coordinates (screen pixels).
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.EditBoxTextControl.EditBoxTextControlScrolling.ScrollTo(JetBrains.TextControl.Graphics.PointEx)">
            <summary>
            <para>
            Explicitly sets the viewport position in the canvas (extent) coordinates.
            </para>
            <para>
            Even though you can pass pixel coodinates to <see cref="M:JetBrains.TextControl.ITextControlScrolling.ScrollTo(JetBrains.TextControl.Coords.ITextControlPos,JetBrains.TextControl.TextControlScrollType)"/> as well, the difference is that this method does not attempt to adjust the scrolling position for the best visibility of the desired point. The viewport left-top corner is positioned as closely to <paramref name="canvasPosition"/> as possible.
            </para>
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.TextControlSelectionBase">
            <summary>
            Base common impl.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.ITextControlSelection.RemoveSelection(System.Boolean)">
            <summary>
            Clears the selection, making the selection range empty and located at the caret location.
            </summary>
            <param name="bCollapseToStart">
            <para>If <c>True</c>, collapses to selection anchor (<see cref="P:JetBrains.TextControl.ITextControlSelection.Range"/>.<see cref="F:JetBrains.TextControl.Coords.TextControlPosRange.Start"/>).</para>
            <para>If <c>False</c>, collapses to selection end (<see cref="P:JetBrains.TextControl.ITextControlSelection.Range"/>.<see cref="F:JetBrains.TextControl.Coords.TextControlPosRange.End"/>).</para>
            </param>
        </member>
        <member name="M:JetBrains.TextControl.ITextControlSelection.SetRange(JetBrains.TextControl.Coords.TextControlPosRange)">
            <summary>
            <para>Attempts to set the text control selection to the given range.</para>
            <para>The <see cref="F:JetBrains.TextControl.Coords.TextControlPosRange.Start"/> denotes the anchor end of the selection (the fixed point of shit+arrowkeys selection).</para>
            <para>The <see cref="F:JetBrains.TextControl.Coords.TextControlPosRange.End"/> is the active end of the selection, ie the caret location.</para>
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.ITextControlSelection.DocRange">
            <summary>
            <para>Gets the <see cref="P:JetBrains.TextControl.ITextControlSelection.Range"/> converted into document coordinates. This range is <see cref="M:JetBrains.Util.TextRange.Normalized">normalized</see>.</para>
            <para>This range loses the virtual space information. If such is required, you should take the <see cref="P:JetBrains.TextControl.ITextControlSelection.Range"/> ends and use their appropriate presentations.</para>
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.ITextControlSelection.Range">
            <summary>
            <para>Gets the selection range.</para>
            <para>The <see cref="F:JetBrains.TextControl.Coords.TextControlPosRange.Start"/> denotes the anchor end of the selection (the fixed point of shit+arrowkeys selection).</para>
            <para>The <see cref="F:JetBrains.TextControl.Coords.TextControlPosRange.End"/> is the active end of the selection, ie the caret location.</para>
            <para>Note that the <see cref="F:JetBrains.TextControl.Coords.TextControlPosRange.Start"/> and <see cref="F:JetBrains.TextControl.Coords.TextControlPosRange.End"/> are not guaranteed to be ordered, ie the end offset might go before the start offset (eg if we're shift+arrow selecting right-to-left); in this case you might use <see cref="M:JetBrains.TextControl.Coords.TextControlPosRange.ToDocRangeNormalized"/> and similar methods to normalize the range.</para>
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.ITextControlSelection.TextControl">
            <summary>
            Gets the owning text control.
            </summary>
        </member>
        <member name="E:JetBrains.TextControl.ITextControlSelection.SelectionChanged">
            <summary>
            <para>Fires when <see cref="P:JetBrains.TextControl.ITextControlSelection.Range"/> changes. Using <see cref="P:JetBrains.TextControl.ITextControlSelection.Range"/> directly is preferrable.</para>
            <para>The sender of this event is the <see cref="P:JetBrains.TextControl.ITextControlSelection.TextControl"/>.</para>
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.TextControlSelectionBase.Range">
            <summary>
            <para>Gets the selection range.</para>
            <para>The <see cref="F:JetBrains.TextControl.Coords.TextControlPosRange.Start"/> is the anchor end of the selection (ie the end with the caret position).</para>
            <para>Note that the <see cref="F:JetBrains.TextControl.Coords.TextControlPosRange.Start"/> and <see cref="F:JetBrains.TextControl.Coords.TextControlPosRange.End"/> are not guaranteed to be aligned, ie the end offset might go before the start offset.</para>
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.TextControlSelectionBase.TextControl">
            <summary>
            Gets the owning text control.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.TextControlSelectionBase.JetBrains#TextControl#ITextControlSelection#DocRange">
            <summary>
            <para>Gets the <see cref="P:JetBrains.TextControl.ITextControlSelection.Range"/> converted into document coordinates. This range is <see cref="M:JetBrains.Util.TextRange.Normalized">normalized</see>.</para>
            <para>This range loses the virtual space information, for which you should use other conversions of the <see cref="P:JetBrains.TextControl.ITextControlSelection.Range"/>.</para>
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.TextControlWindowBase">
            <summary>
            Base impl for text control windows.
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.ITextControlWindow">
            <summary>
            Provides various UI framework-related information about the <see cref="T:JetBrains.TextControl.ITextControl">text control</see>.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.ITextControlWindow.CreateViewportAnchor">
            <summary>
            Creates an anchoring rectangle for the viewport of the text control.
            You must dispose of the value after use.
            Supposedly, creating a new anchor is cheap after you ask it for the first time on this text control. Calling this function for learning the viewport screen coordinates is OK.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.ITextControlWindow.Focus">
            <summary>
            Tries to make <see cref="P:JetBrains.TextControl.ITextControlWindow.IsFocused"/> <c>True</c>. Even if successful, might not apply immediately, as the changes to the <see cref="P:JetBrains.TextControl.ITextControlWindow.IsFocused"/> occur in the reentrancy-guarded context only.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.ITextControlWindow.Show">
            <summary>
            Tries to make <see cref="P:JetBrains.TextControl.ITextControlWindow.IsVisibleOnScreen"/> <c>True</c>. Even if successful, might not apply immediately, as the changes to the <see cref="P:JetBrains.TextControl.ITextControlWindow.IsVisibleOnScreen"/> occur in the reentrancy-guarded context only.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.ITextControlWindow.Frame">
            <summary>
            <para>Gets the class that represent the frame that sites the text control. This frame knows whether it's visible on screen, and sometimes it can cause the environment to switch so that the frame became visible.</para>
            <para>In Visual Studio, an example of such frames is an editor tab or a tool window, in which case this implementation is based on the VS Window Frame interface.</para>
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.ITextControlWindow.IsFocused">
            <summary>
            <para>Gets whether the window is currently focused.</para>
            <para>This property is <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded</see>, which means that all of the property changes will only occur in the guarded context.</para>
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.ITextControlWindow.IsVisibleOnScreen">
            <summary>
            <para>Gets whether the window is currently visible onscreen, which tries to take into account not only the visibility flag of the text control window, but also whether the window layout allows the text control contents to be visible onscreen.</para>
            <para>This property is <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded</see>, which means that all of the property changes will only occur in the guarded context.</para>
            </summary>
            <remarks>Even though <see cref="F:JetBrains.UI.WindowManagement.WindowFrame.IsVisibleOnScreen"/> is also available thru the <see cref="P:JetBrains.TextControl.ITextControlWindow.Frame"/>, its value is not synchronized with <see cref="P:JetBrains.TextControl.ITextControlWindow.IsFocused"/>. This particular property is guaranteed to be high when the text control has keyboard focus, while the frame only reflects what it knows about the environment. Sometimes they do not agree, because not all of the Visual Studio implementation is accurate in details.</remarks>
        </member>
        <member name="P:JetBrains.TextControl.ITextControlWindow.Keyboard">
            <summary>
            Fires when any key (including non-character modifier keys, like Ctrl and Shift) is pressed or released in the text control.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.ITextControlWindow.MouseDown">
            <summary>
            Fires when a mouse button is pressed in this text control.
            You can cancel event processing by default text control mouse handlers by raising <see cref="F:JetBrains.TextControl.TextControlMouseEventArgs.IsHandled"/>.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.ITextControlWindow.MouseMove">
            <summary>
            Fires when a mouse cursor is moved over text control (or outside, if mouse is captured).
            You can cancel event processing by default text control mouse handlers by raising <see cref="F:JetBrains.TextControl.TextControlMouseEventArgs.IsHandled"/>.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.ITextControlWindow.MouseUp">
            <summary>
            Fires when a mouse button is released in this text control.
            You can cancel event processing by default text control mouse handlers by raising <see cref="F:JetBrains.TextControl.TextControlMouseEventArgs.IsHandled"/>.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.ITextControlWindow.TextControl">
            <summary>
            Gets the owning text control.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.TextControlWindowBase.myIsFocusedUnguarded">
            <summary>
            Put focus changes in here.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.TextControlWindowBase.myAnchoringRect">
            <summary>
            Anchor for the whole viewport.
            Lazy-created, then kept until dispose.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.TextControlWindowBase.myFrame">
            <summary>
            Owning frame (VS frame when in VS).
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.TextControlWindowBase.myIsFocusedGuarded">
            <summary>
            Can be changed under a guard only. Flows from <see cref="F:JetBrains.TextControl.TextControlWindowBase.myIsFocusedUnguarded"/>.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.TextControlWindowBase.myIsVisibleOrFocusedGuarded">
            <summary>
            Put visibility changes in here.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.TextControlWindowBase.#ctor(JetBrains.TextControl.ITextControl,JetBrains.UI.WindowManagement.WindowFrame,JetBrains.Threading.IThreading)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.TextControlWindowBase.IsLayoutKnownByUser">
            <summary>
            <para>Gets whether the user is likely to know the visual layout of this text control.</para>
            <para>This means that scrollings and caret movements should better be relative to the current position rather than absolute.</para>
            <para>Formally, it's a bool state that raises some time after the control gets visible, and keeps for some small time after it gets hidden. These delays guarantee that (1) short switches back and forth when eg creating from usage in another text control do not affect the picture and (2) after the fresh new text control is opened for the first time the first positioning is done with layout “unknown”.</para>
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.TextControlWindowBase.CreateViewportAnchorCore">
            <summary>
            Should create the anchoring rect core object. Do not use caching, the impl already does it instead of calling the method directly.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.TextControlWindowBase.FocusCore">
            <summary>
            Should cause the text control to achieve keyboard focus.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.TextControlWindowBase.InitExposeTextControlOnWindowFrame">
            <summary>
            Registers on the window frame.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.TextControlWindowBase.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.TextControl.TextControlWindowBase.JetBrains#TextControl#ITextControlWindow#CreateViewportAnchor">
            <summary>
            Creates an anchoring rectangle for the viewport of the text control.
            You must dispose of the value after use.
            Supposedly, creating a new anchor is cheap after you ask it for the first time on this text control. Calling this function for learning the viewport screen coordinates is OK.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.TextControlWindowBase.JetBrains#TextControl#ITextControlWindow#Focus">
            <summary>
            Tries to make <see cref="P:JetBrains.TextControl.ITextControlWindow.IsFocused"/> <c>True</c>. Even if successful, might not apply immediately, as the changes to the <see cref="P:JetBrains.TextControl.ITextControlWindow.IsFocused"/> occur in the reentrancy-guarded context only.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.TextControlWindowBase.JetBrains#TextControl#ITextControlWindow#Show">
            <summary>
            Tries to make <see cref="P:JetBrains.TextControl.ITextControlWindow.IsVisibleOnScreen"/> <c>True</c>. Even if successful, might not apply immediately, as the changes to the <see cref="P:JetBrains.TextControl.ITextControlWindow.IsVisibleOnScreen"/> occur in the reentrancy-guarded context only.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.TextControlWindowBase.JetBrains#TextControl#ITextControlWindow#Frame">
            <summary>
            <para>Gets the class that represent the frame that sites the text control. This frame knows whether it's visible on screen, and sometimes it can cause the environment to switch so that the frame became visible.</para>
            <para>In Visual Studio, an example of such frames is an editor tab or a tool window, in which case this implementation is based on the VS Window Frame interface.</para>
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.TextControlWindowBase.JetBrains#TextControl#ITextControlWindow#IsFocused">
            <summary>
            <para>Gets whether the window is currently focused.</para>
            <para>This property is <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded</see>, which means that all of the property changes will only occur in the guarded context.</para>
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.TextControlWindowBase.JetBrains#TextControl#ITextControlWindow#IsVisibleOnScreen">
            <summary>
            <para>Gets whether the window is currently visible onscreen, which tries to take into account not only the visibility flag of the text control window, but also whether the window layout allows the text control contents to be visible onscreen.</para>
            <para>This property is <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded</see>, which means that all of the property changes will only occur in the guarded context.</para>
            </summary>
            <remarks>Even though <see cref="F:JetBrains.UI.WindowManagement.WindowFrame.IsVisibleOnScreen"/> is also available thru the <see cref="P:JetBrains.TextControl.ITextControlWindow.Frame"/>, its value is not synchronized with <see cref="P:JetBrains.TextControl.ITextControlWindow.IsFocused"/>. This particular property is guaranteed to be high when the text control has keyboard focus, while the frame only reflects what it knows about the environment. Sometimes they do not agree, because not all of the Visual Studio implementation is accurate in details.</remarks>
        </member>
        <member name="P:JetBrains.TextControl.TextControlWindowBase.JetBrains#TextControl#ITextControlWindow#TextControl">
            <summary>
            Gets the owning text control.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.EditBoxTextControl.EditBoxTextControlWindow.CreateViewportAnchorCore">
            <summary>
            Should create the anchoring rect core object. Do not use caching, the impl already does it instead of calling the method directly.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.EditBoxTextControl.EditBoxTextControlWindow.FocusCore">
            <summary>
            Should cause the text control to achieve keyboard focus.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.EditBoxTextControl.EditBoxTextControlWindow.System#Windows#Forms#IWin32Window#Handle">
            <summary>
            Gets the handle to the window represented by the implementer.
            </summary>
            <returns>
            A handle to the window represented by the implementer.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:JetBrains.TextControl.Graphics.Rect.Between(System.Single,System.Single,System.Single)">
            <summary>
            
            
            </summary>
            <returns>true if b is between a and c</returns>
        </member>
        <member name="M:JetBrains.TextControl.Graphics.FontAttributesHashTable.SearchCollisions(JetBrains.TextControl.FontAttributes,System.UInt32@,System.UInt32@)">
            returns index of bucket where key is found or zero if not found
        </member>
        <member name="T:JetBrains.TextControl.Graphics.FontAttributesHashTable.HashTableParams">
            <summary>
            HashTableParams class describes default behaviour of hash tables
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.Impl.ErrorStripeDocumentBase.OptionErrorStripeUpdateInterval">
            <summary>
            Repaint error stripe no more often than this period.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.Impl.ErrorStripeDocumentBase.myHighlightersToShow">
            <summary>
            List of IHighlighters. Sorted in ascending order on both Ys and startoffset.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:JetBrains.TextControl.Impl.ErrorStripeDocumentBase.myRender" -->
        <member name="F:JetBrains.TextControl.Impl.ErrorStripeDocumentBase.GottenDirty">
            <summary>
            Initiates the repaint of this error stripe. Must be sinked by the woner and redirected to the shared text view wrapper.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.Impl.ErrorStripeDocumentBase.ViewSizeRequested">
            <summary>
            To calculate the y-coordinates, the view size must be known.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Impl.ErrorStripeDocumentBase.CreateHighlighterPositionCacheInstance">
            <summary>
            Allows to override the HighlighterPositionCache.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Impl.ErrorStripeDocumentBase.GetMarkersSpaceRect(System.Drawing.Size)">
            <summary>
            Gets the rectangle for the markers, this does not include the error stripe indicator space.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Impl.ErrorStripeDocumentBase.RenderNow">
            <summary>
            Does the rendering of the error stripe. Guarded.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.Impl.ErrorStripeDocumentBase.HighlighterPositionCache.myFrozenValidDocLinesSorted">
            <summary>
            After <see cref="M:JetBrains.TextControl.Impl.ErrorStripeDocumentBase.HighlighterPositionCache.Freeze"/>, we can calculate new line ratios no more; build a list of valid lines for binarysearching here, and do linear approximation.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.Impl.ErrorStripeDocumentBase.HighlighterPositionCache.myIsFrozen">
            <seealso cref="M:JetBrains.TextControl.Impl.ErrorStripeDocumentBase.HighlighterPositionCache.Freeze"/>
        </member>
        <member name="M:JetBrains.TextControl.Impl.ErrorStripeDocumentBase.HighlighterPositionCache.Freeze">
            <summary>
            Prohibits calculating any new cache entries.
            The cache is filled during the render, then frozen and used for tooltips, clicks, etc (because the cache data might be a bit dated, and will collide with new calculations).
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Impl.ErrorStripeDocumentBase.HighlighterPositionCache.GetScrollRatio(JetBrains.Util.dataStructures.TypedIntrinsics.Int32{JetBrains.DocumentModel.DocLine})">
            <summary>
            Converts the document line number into a scrollbar position ratio [0..1], for displaying a highlighter on the error stripe.
            The values are cached.
            </summary>
            <remarks>The mapping is nonlinear because of collapsed regions, word wrapping, and so on.</remarks>
        </member>
        <member name="M:JetBrains.TextControl.Impl.ErrorStripeDocumentBase.HighlighterPositionCache.GetScrollRatioCore(JetBrains.Util.dataStructures.TypedIntrinsics.Int32{JetBrains.DocumentModel.DocLine})">
            <summary>
            Called by <see cref="M:JetBrains.TextControl.Impl.ErrorStripeDocumentBase.HighlighterPositionCache.GetScrollRatio(JetBrains.Util.dataStructures.TypedIntrinsics.Int32{JetBrains.DocumentModel.DocLine})"/> in case of a cache miss.
            Should be doing the calculation itself.
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.Impl.ErrorStripeDocumentBase.RenderInfo">
            <summary>
            Caches all of the info involved in the retained-state render, to be updated in the whole.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.Impl.ErrorStripeDocumentBase.RenderInfo.myDisposeBackBuffer">
            <summary>
            Knows how to dispose of the current <see cref="F:JetBrains.TextControl.Impl.ErrorStripeDocumentBase.RenderInfo.myHBitmapBackBuffer"/> value.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.Impl.ErrorStripeDocumentBase.RenderInfo.myHBitmapBackBuffer">
            <summary>
            We cannot do rendering in <see cref="M:JetBrains.TextControl.Impl.ErrorStripeDocumentBase.RenderInfo.Paint(System.Drawing.Graphics,System.Drawing.Size)"/> because it requires a read lock.
            Instead, we render into the back buffer in <see cref="M:JetBrains.TextControl.Impl.ErrorStripeDocumentBase.RenderNow"/> and just blit it on <see cref="M:JetBrains.TextControl.Impl.ErrorStripeDocumentBase.RenderInfo.Paint(System.Drawing.Graphics,System.Drawing.Size)"/>.
            The back buffer is stored here in the native <c>HBITMAP</c> format.
            We MUST use native bitmaps at some point to avoid the Error Stripe Disease. In this aspect there is no use of storing the managed Bitmap because we'll have to turn it into an unmanaged on each render, which is more expensive.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.Impl.ErrorStripeDocumentBase.RenderInfo.mySizeBackBuffer">
            <summary>
            Size of the back buffer at <see cref="F:JetBrains.TextControl.Impl.ErrorStripeDocumentBase.RenderInfo.myHBitmapBackBuffer"/>, invalid when <c>Null</c>.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.Impl.ErrorStripeDocumentBase.RenderInfo.MarkersSpaceRect">
            <summary>
            Caches the area into which the markers are rendered.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Impl.ErrorStripeDocumentBase.RenderInfo.Paint(System.Drawing.Graphics,System.Drawing.Size)">
            <summary>
            Paints the cached rendered data onscreen. The sizes might differ because of being out-of-date, use the <see cref="!:sizeViewActual"/> for scaling.
            Returns whether the size is still valid; if <c>False</c>, needs a new render.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Impl.ErrorStripeDocumentBase.RenderInfo.ScaleY(System.Int32,System.Drawing.Size)">
            <summary>
            After the error stripe control is resized and before a new cached render is produced, the difference in sizes is mitigated by scaling. Adjusts the actual y-coordinate of the error stripe control to the coordinates that used to be when the render were generated, to make it valid for the <see cref="P:JetBrains.TextControl.Impl.ErrorStripeDocumentBase.RenderInfo.HighlighterPositionCache"/>.
            </summary>
            <param name="yViewActual">Y-coordinate in actual view coordinates.</param>
            <param name="sizeViewActual">The actual size of the view.</param>
            <returns>Y-coordinate in render-cached <see cref="P:JetBrains.TextControl.Impl.ErrorStripeDocumentBase.RenderInfo.HighlighterPositionCache"/> coordinates.</returns>
        </member>
        <member name="M:JetBrains.TextControl.Impl.ErrorStripeDocumentBase.RenderInfo.SetNewHighlighterPositionsCache(JetBrains.TextControl.Impl.ErrorStripeDocumentBase.HighlighterPositionCache)">
            <summary>
            The render instance is reused if the bitmap dimensions are the same, so that not to recreate the bitmap.
            But the <see cref="P:JetBrains.TextControl.Impl.ErrorStripeDocumentBase.RenderInfo.HighlighterPositionCache"/> must be refreshed. This is not the property setter to accentuate that this is a service method.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Impl.ErrorStripeDocumentBase.RenderInfo.System#IDisposable#Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.TextControl.Impl.ErrorStripeDocumentBase.RenderInfo.HighlighterPositionCache">
            <summary>
            Gets or sets the cache that maps doc-offsets to error stripe y-positions.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Impl.StandaloneTextControlCoordinateConversion.Screen_To_TextControlLineColumn(System.Drawing.Point)">
            <summary>
            Standard impl based on the <see cref="M:JetBrains.TextControl.Coords.TextControlCoordinateConversionCore.Canvas_To_TextControlLineColumn(JetBrains.TextControl.Graphics.PointEx)"/>.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Impl.StandaloneTextControlCoordinateConversion.TextControlLineColumn_To_Screen(JetBrains.TextControl.TextControlLineColumn)">
            <summary>
            Standard impl based on the <see cref="M:JetBrains.TextControl.Coords.TextControlCoordinateConversionCore.TextControlLineColumn_To_Canvas(JetBrains.TextControl.TextControlLineColumn)"/>.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Impl.StandaloneTextControlCoordinateConversion.Screen_To_Viewport(System.Drawing.Point)">
            <summary>
            Helper conversion for deriving screen conversions from canvas ones.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Impl.StandaloneTextControlCoordinateConversion.Viewport_To_Screen(System.Drawing.Point)">
            <summary>
            Helper conversion for deriving screen conversions from canvas ones.
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.Impl.TextControlManagerActivityTracker">
            <summary>
            Logs activity for <see cref="T:JetBrains.TextControl.TextControlManager"/>-handled things.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Impl.TextControlManagerActivityTracker.LogNewFocusedTextControl(JetBrains.TextControl.ITextControl,JetBrains.Application.IShellLocks,JetBrains.ActivityTracking.IActivityTracker)">
            <summary>
            Focused text control has changed.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Impl.TextControlManagerActivityTracker.System#IDisposable#Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:JetBrains.TextControl.Impl.TextControlManagerDerivatives">
            <summary>
            Derivatives from the info that the <see cref="F:JetBrains.TextControl.Impl.TextControlManagerDerivatives.TextControlManager"/> has.
            They're kept out of the parent object for brevity, and they're kept in one instance because some of them need helper collections to go.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.Impl.TextControlManagerDerivatives.myListFocusedTextControls">
            <summary>
            As the text control focus events are delayed for guarding, it may so happen that at some moment more than one text control reports having focus. Keep track of all the textcontrols claiming to have focus.
            Note: List not Hash because sometimes VS fails to fire an event (or we to catch it) and we erronousely consider some text control to still have focus. In this case we'd take the most-recently-focused text control from the list.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.Impl.TextControlManagerDerivatives.CurrentFrameTextControl">
            <summary>
            Gets the text control that most recently had the keyboard focus, unless that text control has been destroyed or we have left the window frame that holds the text control. May be <c>Null</c>. Changes are guarded.
            Note that, unlike <see cref="F:JetBrains.TextControl.Impl.TextControlManagerDerivatives.LastFocusedTextControl"/>, this property resets to <c>Null</c> when the focus wanders off to some tool window or another frame of such a kind.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.Impl.TextControlManagerDerivatives.FocusedTextControl">
            <summary>
            Gets the text control that currently has the keyboard focus. May be <c>Null</c>. Changes are guarded.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.Impl.TextControlManagerDerivatives.LastFocusedTextControl">
            <summary>
            Gets the text control that most recently had the keyboard focus, unless that text control has been destroyed. May be <c>Null</c>. Changes are guarded.
            Note that this property does not lose its value if focus wanders off to some tool window or another frame of such a kind.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.Impl.TextControlManagerDerivatives.TextControls">
            <summary>
            Gets the list of all the text controls that currently exist.
            Could be modified on the primary thread in the guarded context only.
            (Just like <see cref="P:JetBrains.TextControl.TextControlManager.TextControls"/>.)
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.Impl.TextControlManagerDerivatives.VisibleTextControls">
            <summary>
            Tracks the list of <see cref="F:JetBrains.TextControl.Impl.TextControlManagerDerivatives.TextControls">text controls</see> currently visible on screen.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Impl.TextControlManagerDerivatives.System#IDisposable#Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:JetBrains.TextControl.Impl.TextControlManagerDerivativesLegacy">
            <summary>
            Like <see cref="T:JetBrains.TextControl.Impl.TextControlManagerDerivatives"/>, but hosts legacy stuff like plain event and property wrappers for the retained-state data points.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.Impl.TextControlManagerDerivativesLegacy.FocusedTextControl">
            <summary>
            Gets the text control that currently has the keyboard focus. May be <c>Null</c>. Changes are guarded.
            </summary>
        </member>
        <member name="E:JetBrains.TextControl.Impl.TextControlManagerDerivativesLegacy.CaretMoved">
            <summary>
            Fires when the caret moves in the focused text control.
            Note: there're no caret move arguments because the event is also fired when the active text control changes.
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.TextControlManagerTextControls">
            <summary>
            Does <see cref="T:JetBrains.TextControl.ITextControl"/> creation and maintenance on behalf of the <see cref="T:JetBrains.TextControl.TextControlManager"/>.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.TextControlManagerTextControls.TextControls">
            <summary>
            Gets the list of all the text controls that currently exist.
            Could be modified on the primary thread in the guarded context only.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.TextControlManagerTextControls.CreateShellTextControl(JetBrains.DocumentModel.IDocument,JetBrains.UI.WindowManagement.WindowFrame)">
             <summary>
             <para>Creates the text control of the default kind in the current application environment, and attaches it to the given document (there might be multiple text controls for the same document).</para>
             <para>You're responsible for disposing of the returned text control when needed no more.</para>
             </summary>
            <param name="document">
              The document for the text control.
            </param>
            <param name="frame">
              The logical owner of the text control in the UI hierarchy.
            </param>
            <returns>The new text control.</returns>
             <remarks>
             <para>Note that Visual Studio Integration uses other methods for attaching to existing Visual Studio text controls.</para>
             </remarks>
        </member>
        <member name="M:JetBrains.TextControl.TextControlManagerTextControls.CreateTextControl``1(JetBrains.TextControl.CreateTextControlParams{``0})">
            <summary>
            Creates a new text control for some document (there might be multiple text controls for the same document).
             The document and the type of the text control created are determined by the <paramref name="param"/>, for which any <see cref="T:JetBrains.TextControl.CreateTextControlParams`1"/> inheritor could be used.
            </summary>
            <typeparam name="TTextControl">Type of the text control to create.</typeparam><param name="param">Text control context and parameters.</param>
            <returns>
            The new text control.
            </returns>
        </member>
        <member name="M:JetBrains.TextControl.TextControlManagerTextControls.System#IDisposable#Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:JetBrains.TextControl.Impl.TextControlTypingHandlersManager">
            <summary>
            Manages typing handlers for the <see cref="T:JetBrains.TextControl.TextControlManager"/>.
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.ITypingHandler">
            <summary>
            Handles typing in a text control.
            If you'd like to receive notifications when user types, see <see cref="T:JetBrains.TextControl.ITextControlManager"/> and its <see cref="M:JetBrains.TextControl.ITextControlManager.AddTypingHandler(JetBrains.TextControl.ITypingHandler)"/> method.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.ITypingHandler.Type(JetBrains.TextControl.ITypingContext)">
            <summary>
            Your implementation is called when the user types a character in the text control.
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.ITypingContext">
            <summary>
            Context information for an <see cref="T:JetBrains.TextControl.ITypingHandler"/>.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.ITypingContext.CallNext">
            <summary>
            Allows other handlers to operate.
            Typing handlers operate in a chain. You might do your handling before remaining typing handlers, after them, or instead of them, based on whether and when you <see cref="M:JetBrains.TextControl.ITypingContext.CallNext"/>.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.ITypingContext.EnsureWritable">
            <summary>
            Requests write access for the document of the <see cref="P:JetBrains.TextControl.ITypingContext.TextControl"/>.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.ITypingContext.Char">
            <summary>
            Gets the character that were typed.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.ITypingContext.TextControl">
            <summary>
            Gets the text control we're typing in.
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.IRow">
            <summary>
            Represents a row of an editor
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.ITextControl2">
            <summary>
            The extended version of the text control interface.
            Historically, these members were present in the original interface. However, they're only used by the implementation (mostly that of the standalone text control), and are optional for the VS-based text controls, especially DevTen.
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.ITextControlCanvas">
            <summary>
            Maps text control entities to the pixel coordinate system.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.ITextControlCanvas.GetColumnX(JetBrains.TextControl.IRow,JetBrains.Util.dataStructures.TypedIntrinsics.Int32{JetBrains.TextControl.TextControlColumn})">
            <summary>
            Gets the pixel coordinate of the character left point. The column is row-dependent because the in a non-fixed-width font there's no such thing as a row-independent column.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.ITextControlCanvas.GetExtentHeight">
            <summary>
            Gets the text extent height, ie the total height of the scrollable text. If the viewport is this large, there is no scrolling.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.ITextControlCanvas.GetExtentWidth">
            <summary>
            Gets the text extent width, ie the total width of the scrollable text. If the viewport is this large, there is no scrolling.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.ITextControlCanvas.GetRowHeight(JetBrains.TextControl.IRow)">
            <summary>
            Gets the height of the given row.
            // TODO: what about wordwrapping?
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.ITextControlCanvas.GetRowWidth(JetBrains.TextControl.IRow)">
            <summary>
            Gets the width of the given row.
            // TODO: what about wordwrapping?
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.ITextControlCanvas.GetRowY(JetBrains.TextControl.IRow)">
            <summary>
            Gets the pixel coordinate of the row top.
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.ITextControlManager">
            <summary>
            Manages the text controls throughout the application.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.ITextControlManager.CreateShellTextControl(JetBrains.DocumentModel.IDocument,JetBrains.UI.WindowManagement.WindowFrame)">
             <summary>
             <para>Creates the text control of the default kind in the current application environment, and attaches it to the given document (there might be multiple text controls for the same document).</para>
             <para>You're responsible for disposing of the returned text control when needed no more.</para>
             <para>Note that the shell text control might have limitations on which kinds of documents could be used with it.</para>
             </summary>
            <param name="document">
              The document for the text control.
            </param>
            <param name="frame">
              The logical owner of the text control in the UI hierarchy.
            </param>
            <returns>The new text control.</returns>
             <remarks>
             <para>Note that Visual Studio Integration uses other methods for attaching to existing Visual Studio text controls.</para>
             </remarks>
        </member>
        <member name="M:JetBrains.TextControl.ITextControlManager.CreateSimpleTextControl(JetBrains.DocumentModel.IDocument,JetBrains.UI.WindowManagement.WindowFrame)">
             <summary>
             <para>Creates the simplest text control for the given document (there might be multiple text controls for the same document).</para>
             <para>The simplest and most lightweight implementation is used. Use specific <see cref="T:JetBrains.TextControl.CreateTextControlParams`1"/> with the <see cref="M:JetBrains.TextControl.ITextControlManager.CreateTextControl``1(JetBrains.TextControl.CreateTextControlParams{``0})"/> factory method if you care for the text control type.</para>
             <para>You're responsible for disposing of the returned text control when needed no more.</para>
             </summary>
            <param name="document">
              The document for the text control.
            </param>
            <param name="frame">The logical owner of the text control in the UI hierarchy.</param>
            <returns>The new text control.</returns>
        </member>
        <member name="M:JetBrains.TextControl.ITextControlManager.CreateTextControl``1(JetBrains.TextControl.CreateTextControlParams{``0})">
            <summary>
            <para>Creates a new text control for the document (there might be multiple text controls for the same document).</para>
            <para>The document and the type of the text control created are determined by the <paramref name="param"/>, for which any <see cref="T:JetBrains.TextControl.CreateTextControlParams`1"/> inheritor could be used.</para>
            </summary>
            <typeparam name="TTextControl">Type of the text control to create.</typeparam>
            <param name="param">Text control context and parameters.</param>
            <returns>The new text control.</returns>
        </member>
        <member name="P:JetBrains.TextControl.ITextControlManager.CurrentFrameTextControl">
            <summary>
            <para>Gets the text control that most recently had the keyboard focus, unless that text control has been destroyed or we have left the window frame that holds the text control. May be <c>Null</c>. Changes are guarded.</para>
            <para>Note that, unlike <see cref="P:JetBrains.TextControl.ITextControlManager.LastFocusedTextControl"/>, this property resets to <c>Null</c> when the focus wanders off to some tool window or another frame of such a kind.</para>
            </summary>
            <seealso cref="P:JetBrains.TextControl.ITextControlManager.FocusedTextControl"/>
            <seealso cref="P:JetBrains.TextControl.ITextControlManager.LastFocusedTextControl"/>
        </member>
        <member name="P:JetBrains.TextControl.ITextControlManager.FocusedTextControl">
            <summary>
            Gets the text control that currently has the keyboard focus. May be <c>Null</c>. Changes are guarded.
            </summary>
            <seealso cref="P:JetBrains.TextControl.ITextControlManager.LastFocusedTextControl"/>
            <seealso cref="P:JetBrains.TextControl.ITextControlManager.CurrentFrameTextControl"/>
        </member>
        <member name="P:JetBrains.TextControl.ITextControlManager.LastFocusedTextControl">
            <summary>
            <para>Gets the text control that most recently had the keyboard focus, unless that text control has been destroyed. May be <c>Null</c>. Changes are guarded.</para>
            <para>Note that this property does not lose its value if focus wanders off to some tool window or another frame of such a kind.</para>
            </summary>
            <seealso cref="P:JetBrains.TextControl.ITextControlManager.FocusedTextControl"/>
            <seealso cref="P:JetBrains.TextControl.ITextControlManager.CurrentFrameTextControl"/>
        </member>
        <member name="P:JetBrains.TextControl.ITextControlManager.Legacy">
            <summary>
            Legacy wrappers to expose the collections and property changes as raw CLR events.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.ITextControlManager.TextControls">
            <summary>
            <para>Gets the list of all the text controls that currently exist.</para>
            <para>Could be modified on the primary thread in the guarded context only.</para>
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.ITextControlManager.VisibleTextControls">
            <summary>
            <para>Tracks the list of <see cref="P:JetBrains.TextControl.ITextControlManager.TextControls">text controls</see> currently visible on screen. There is no specific order on the text visible controls. This collection is live.</para>
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.ITextControlSelectionEx.GetSelectionText(JetBrains.TextControl.ITextControlSelection)">
            <summary>
            Gets the document text for the selected range.
            </summary>
            <param name="sel"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.TextControl.ITextControlSelectionEx.HasSelection(JetBrains.TextControl.ITextControlSelection)">
            <summary>
            Tells whether the selection is non-empty.
            Otherwise, the selection range will be placed at the <see cref="P:JetBrains.TextControl.ITextControl.Caret"/> position.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.ITextControlSelectionEx.SetRange(JetBrains.TextControl.ITextControlSelection,JetBrains.Util.TextRange)">
            <summary>
            Sets selection to a range given in the document coordinates.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.ITextControlWindowEx.ShowOrFocus(JetBrains.TextControl.ITextControlWindow,System.Boolean)">
            <summary>
            Switches between <see cref="M:JetBrains.TextControl.ITextControlWindow.Show"/> and <see cref="M:JetBrains.TextControl.ITextControlWindow.Focus"/> with a boolean param.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Markup.DocumentMarkupEx.GetMarkup(JetBrains.DocumentModel.IDocument)">
            <summary>
            Gets the document highlighters.
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.ShellComponentsEx">
            <summary>
            <see cref="T:JetBrains.Application.ShellComponents"/> in this assembly.
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.TextControlColumn">
            <summary>
            Type disambig for <see cref="T:JetBrains.Util.dataStructures.TypedIntrinsics.Int32`1"/>.
            Represents zero-based column indices in the text control view.
            This does not correspond directly to the document lines and columns because of the collapsed regions and other view transformations.
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.TextControlLine">
            <summary>
            Type disambig for <see cref="T:JetBrains.Util.dataStructures.TypedIntrinsics.Int32`1"/>.
            Represents zero-based line indices in the text control view.
            This does not correspond directly to the document lines and columns because of the collapsed regions and other view transformations.
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.TextControlLineColumn">
            <summary>
            Represents the document position in terms of Line and Column indices.
            Note that this has nothing to do with screen pixels, for which there's the Canvas Rectangle and the <see cref="T:JetBrains.TextControl.Graphics.Rect"/> class.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.TextControlLineColumn.GetStartOfRow">
            <summary>
            Gets a new visual position located at the same row as the original one, but in the first column.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.TextControlLineColumn.OffsetHorizontally(JetBrains.Util.dataStructures.TypedIntrinsics.Int32{JetBrains.TextControl.TextControlColumn})">
            <summary>
            Returns a new position with the same row and an offset column.
            Does not change the current object.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.TextControl.TextControlLineColumnRange">
            <summary>
            A range between two <see cref="T:JetBrains.TextControl.TextControlLineColumn"/>s.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.TextControl.TextControlLineColumnRange.ToNormalized">
            <summary>
            Normalizes the range so that its start position went before the end position.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.TextControl.TextControlLineColumnRange.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
            <param name="obj">Another object to compare to. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.VsIntegration.TextControl.TextControlLineColumnRange.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.VsIntegration.TextControl.TextControlLineColumnRange.Equals(JetBrains.VsIntegration.TextControl.TextControlLineColumnRange)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="T:JetBrains.TextControl.TextControlMouseEventArgs">
            <summary>
            Arguments for text control events.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.TextControlMouseEventArgs.#ctor(JetBrains.TextControl.ITextControl,System.Drawing.Point)">
            <summary>
            Create. Point is known, keys/button states are queried from system.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.TextControlMouseEventArgs.#ctor(JetBrains.TextControl.ITextControl,System.Nullable{JetBrains.Interop.WinApi.KeyStateMasks},System.Drawing.Point)">
            <summary>
            Create.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.TextControlMouseEventArgs.IsHandled">
            <summary>
            Set to <c>True</c> if you'd like to prevent default handlers from processing the message.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.TextControlMouseEventArgs.KeysAndButtons">
            <summary>
            Which keyboard modifier keys and mouse buttons were pressed when the event was fired.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.TextControlMouseEventArgs.ScreenPosition">
            <summary>
            Mouse cursor position, in screen coordinates. Might be outside text control if the event is keyboard-induced.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.TextControlMouseEventArgs.TextControl">
            <summary>
            The originating text control.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.TextControlMouseEventArgs.FromCurrentPositionAndState(JetBrains.TextControl.ITextControl)">
            <summary>
            Gets the arguments corresponding to the current mouse position onscreen and keyboard state.
            Might be outside the text control.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:JetBrains.TextControl.TextControlMouseEventArgs.FromCurrentPositionAndStateIfOverTextControl(JetBrains.TextControl.ITextControl)" -->
        <member name="P:JetBrains.TextControl.TextControlScheme.HasErrorStripe">
            <summary>
            Whether the error stripe should be shown in the Text Control.
            The error stripe marks are added thru the document markers API, and the error stripe indicator state is specified right in the text control, with its <see cref="P:JetBrains.TextControl.ITextControl.ErrorStripeIndicatorState"/>.
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.TextControlScrollType">
            <summary>
            Applies when the text control is scrolled to reveal a certain <see cref="T:JetBrains.TextControl.Coords.ITextControlPos">position</see>.
            Defines how the desired position will be accomodared inside the viewport area.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.TextControlScrollType.DontCare">
            <summary>
            Scrolls so that the position is visible anywhere in the viewport.
            There're no other guarantees or heuristics applied.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.TextControlScrollType.CenterInView">
            <summary>
            Scrolls so that the position were at about the center of the viewport.
            The view is scrolled even if the position is already visible.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.TextControlScrollType.TopOfView">
            <summary>
            Scrolls so that the position were at about the top of the viewport.
            The view is scrolled even if the position is already visible.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.TextControlScrollType.UpperHalf">
            <summary>
            Scrolls so that the position were in the upper half of the viewport.
            The view is scrolled even if the position is already visible.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.TextControlScrollType.LowerHalf">
            <summary>
            Scrolls so that the position were in the lower half of the viewport.
            The view is scrolled even if the position is already visible.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.TextControlScrollType.Smart">
            <summary>
            <para>Smart scrolling mode. Should be used in most cases.</para>
            <para>Does minimal scrolling (or none at all) required to place the position into the viewport not too close to its edges.</para>
            </summary>
            <remarks>
            <para>If the position is already visible in the view and is not too close to the edges, no scrolling is performed. This fits for navigating adjacent occurences without the view jumping.</para>
            <para>Otherwise, places the position above the viewport center if it were above the viewport, and vice versa.</para>
            </remarks>
        </member>
        <member name="F:JetBrains.TextControl.TextControlScrollType.SmartDirectionalUp">
            <summary>
            A flavor of <see cref="F:JetBrains.TextControl.TextControlScrollType.Smart"/> for special cases. Relaxes the “not too close to the edge” constraint: would not scroll against the direction if the target is at least visible.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.TextControlScrollType.SmartDirectionalDown">
            <summary>
            A flavor of <see cref="F:JetBrains.TextControl.TextControlScrollType.Smart"/> for special cases. Relaxes the “not too close to the edge” constraint: would not scroll against the direction if the target is at least visible.
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.TextControlManager">
            <summary>
            Base implementation for <see cref="T:JetBrains.TextControl.ITextControlManager"/>.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.TextControlManager.AggTypingHandlers">
            <summary>
            Aggregate. Manages adding/removing typing handlers and executing typing on them.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.TextControlManager.myAggDerivatives">
            <summary>
            An aggregate for the data derived from other aspects of the text control manager.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.TextControlManager.myAggTextControls">
            <summary>
            Aggregates <see cref="T:JetBrains.TextControl.ITextControl"/> creation and maintenance.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.TextControlManager.#ctor(JetBrains.Application.Shell,JetBrains.Application.ChangeManager)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.TextControlManager.TextControlInWindowFrame">
            <summary>
            In the <see cref="T:JetBrains.UI.WindowManagement.WindowFrame">window frame</see> <see cref="F:JetBrains.UI.WindowManagement.WindowFrame.Bag">bag</see>, identifies the text control attached to the window frame.
            Guarded set/clear.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.TextControlManager.CreateAggTextControls">
            <summary>
            Chooses the type for the <see cref="F:JetBrains.TextControl.TextControlManager.myAggTextControls"/> begind.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.TextControlManager.CreateShellTextControl(JetBrains.DocumentModel.IDocument,JetBrains.UI.WindowManagement.WindowFrame)">
             <summary>
             <para>Creates the text control of the default kind in the current application environment, and attaches it to the given document (there might be multiple text controls for the same document).</para>
             <para>You're responsible for disposing of the returned text control when needed no more.</para>
             </summary>
            <param name="document">
              The document for the text control.
            </param>
            <param name="frame"></param>
            <returns>The new text control.</returns>
             <remarks>
             <para>Note that Visual Studio Integration uses other methods for attaching to existing Visual Studio text controls.</para>
             </remarks>
        </member>
        <member name="M:JetBrains.TextControl.TextControlManager.CreateSimpleTextControl(JetBrains.DocumentModel.IDocument,JetBrains.UI.WindowManagement.WindowFrame)">
             <summary>
             <para>Creates the simplest text control for the given document (there might be multiple text controls for the same document).</para>
             <para>The simplest and most lightweight implementation is used. Use specific <see cref="T:JetBrains.TextControl.CreateTextControlParams`1"/> with the <see cref="M:JetBrains.TextControl.ITextControlManager.CreateTextControl``1(JetBrains.TextControl.CreateTextControlParams{``0})"/> factory method if you care for the text control type.</para>
             <para>You're responsible for disposing of the returned text control when needed no more.</para>
             </summary>
            <param name="document">
              The document for the text control.
            </param>
            <param name="frame"></param>
            <returns>The new text control.</returns>
        </member>
        <member name="M:JetBrains.TextControl.TextControlManager.CreateTextControl``1(JetBrains.TextControl.CreateTextControlParams{``0})">
            <summary>
            Creates a new text control for some document (there might be multiple text control for the same document).
            The document and the type of the text control created are determined by the <paramref name="param"/>, for which any <see cref="T:JetBrains.TextControl.CreateTextControlParams`1"/> inheritor could be used.
            </summary>
            <typeparam name="TTextControl">Type of the text control to create.</typeparam>
            <param name="param">Text control context and parameters.</param>
            <returns>The new text control.</returns>
        </member>
        <member name="P:JetBrains.TextControl.TextControlManager.CurrentFrameTextControl">
            <summary>
            Gets the text control that most recently had the keyboard focus, unless that text control has been destroyed or we have left the window frame that holds the text control. May be <c>Null</c>. Changes are guarded.
            Note that, unlike <see cref="P:JetBrains.TextControl.TextControlManager.LastFocusedTextControl"/>, this property resets to <c>Null</c> when the focus wanders off to some tool window or another frame of such a kind.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.TextControlManager.FocusedTextControl">
            <summary>
            Gets the text control that currently has the keyboard focus. May be <c>Null</c>. Changes are guarded.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.TextControlManager.LastFocusedTextControl">
            <summary>
            Gets the text control that most recently had the keyboard focus, unless that text control has been destroyed. May be <c>Null</c>. Changes are guarded.
            Note that this property does not lose its value if focus wanders off to some tool window or another frame of such a kind.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.TextControlManager.Legacy">
            <summary>
            Legacy wrappers to expose the collections and property changes as raw CLR events.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.TextControlManager.TextControls">
            <summary>
            Gets the list of all the text controls that currently exist.
            Could be modified on the primary thread in the guarded context only.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.TextControlManager.VisibleTextControls">
            <summary>
            <para>Tracks the list of <see cref="P:JetBrains.TextControl.TextControlManager.TextControls">text controls</see> currently visible on screen. There is no specific order on the text visible controls. This collection is live.</para>
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.Impl.Painting.TextPainter">
            <author>dsl</author>
        </member>
        <member name="M:JetBrains.TextControl.Impl.Painting.TextPainter.Attrs.Equals(JetBrains.TextControl.Impl.Painting.TextPainter.Attrs)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="obj" /> parameter; otherwise, false.
            </returns>
            <param name="obj">An object to compare with this object.</param>
        </member>
        <member name="M:JetBrains.TextControl.Impl.Painting.TextPainter.Attrs.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <returns>
            true if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
            <param name="obj">Another object to compare to. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.TextControl.Impl.Painting.TextPainter.Attrs.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.TextControl.Impl.RowImpl.Compare(System.Object,System.Object)">
            <summary>
            Compares columns for search
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.TextControl.Impl.StandaloneErrorStripeDocument">
            <summary>
            Document (model + some of the controller) for the standalone text control version.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Impl.TextControlImpl.IsPositionInTextView(JetBrains.TextControl.Coords.ITextControlPos)">
            <summary>
            Gets whether the given document position is present in the text view of the text control.
            </summary>
            <param name="position">The document position in the unified position format (<see cref="P:JetBrains.TextControl.Impl.TextControlImpl.Coords"/>.<see cref="M:JetBrains.TextControl.Coords.ITextControlCoords.FromDocOffset(System.Int32)"/> or <see cref="P:JetBrains.TextControl.Impl.TextControlImpl.Coords"/>.<see cref="M:JetBrains.TextControl.Coords.ITextControlCoords.FromDocLineColumn(JetBrains.DocumentModel.DocumentCoords)"/>).</param>
            <remarks>Even though every position could be converted to a text view (and usually a reasonable value will be returned), sometimes that would be only an approximate position (that would not roundtrip). For example, a document position could be hidden from the text view by a collapsed region.</remarks>
        </member>
        <member name="M:JetBrains.TextControl.Impl.TextControlImpl.CanvasToNearestVisual(JetBrains.TextControl.Graphics.PointEx)">
            <summary>
            Note(H): once this used to be an <see cref="T:JetBrains.TextControl.ITextControl"/> member, but as it has no xmldoc, no usages, and no VS implementation, I've pushed it out to standalone impl only.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Impl.TextControlImpl.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.TextControl.Impl.TextControlImpl.Coords">
            <summary>
            Provides access to the text control coordinate conversion, which makes it possible to represent a point on the text control or in the document in a unified way.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.Impl.TextControlImpl.JetBrains#TextControl#ITextControl#Disposables">
            <summary>
            Gets the Disposables collection that controls the text control lifetime.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Impl.WindowModelImpl.FocusTest">
            <summary>
            Emulats text control focus in tests.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Impl.WindowModelImpl.CreateViewportAnchorCore">
            <summary>
            Should create the anchoring rect core object. Do not use caching, the impl already does it instead of calling the method directly.
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.Markup.IDocumentMarkupManager">
            <summary>
            Document markup factory.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Markup.IDocumentMarkup.AddHighlighter(JetBrains.Util.Key,JetBrains.Util.TextRange,JetBrains.TextControl.Markup.AreaType,System.Int32,System.String,JetBrains.TextControl.Markup.ErrorStripeAttributes,JetBrains.TextControl.Markup.IHighlighterTooltipProvider)">
            <summary>
            Adds highlighter with attributes from HighlighterAttributeRegistry
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.Markup.IDocumentMarkup.Document">
            <summary>
            Gets the document highlighted by this markup.
            </summary>
        </member>
        <member name="E:JetBrains.TextControl.Markup.IDocumentMarkup.HighlighterAdded">
            <summary>
            Fired when highlighter is added.
            </summary>
        </member>
        <member name="E:JetBrains.TextControl.Markup.IDocumentMarkup.HighlighterModified">
            <summary>
            Fired when highlighter's user data is modified. <see cref="P:JetBrains.TextControl.Markup.IHighlighter.UserData"/>
            </summary>
        </member>
        <member name="E:JetBrains.TextControl.Markup.IDocumentMarkup.HighlighterRemoved">
            <summary>
            Fired when highlighter is <b>explicitly</b> removed.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:JetBrains.TextControl.Markup.Impl.DocumentMarkupManagerBase" -->
        <member name="P:JetBrains.TextControl.Markup.Impl.DocumentMarkupBase.Document">
            <summary>
            Gets the document highlighted by this markup.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.Markup.RegisterHighlighterAttribute.ForegroundColor">
            <summary>
            List of colors, delimited by ':'
            In case of VS2003 first COLORINDEX color will be used
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.Markup.RegisterHighlighterAttribute.BackgroundColor">
            <summary>
            List of colors, delimited by ':'
            In case of VS2003 first COLORINDEX color will be used
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.Markup.RegisterHighlighterAttribute.EffectColor">
            <summary>
            List of colors, delimited by ':'
            In case of VS2003 first COLORINDEX color will be used
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Impl.TestTextControlManager.#ctor(JetBrains.Application.Shell,JetBrains.Application.ChangeManager)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
    </members>
</doc>
