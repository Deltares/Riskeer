<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JetBrains.Platform.CommonServices</name>
    </assembly>
    <members>
        <member name="T:JetBrains.Annotations.CanBeNullAttribute">
            <summary>
            Indicates that the value of marked element could be <c>null</c> sometimes, so the check for <c>null</c> is necessary before its usage
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.NotNullAttribute">
            <summary>
            Indicates that the value of marked element could never be <c>null</c>
            </summary>
        </member>
        <member name="T:JetBrains.Platform.CommonServices.TextControlServices.ErrorStripeStyle">
            <summary>
            Defines the Error Stripe presentation style: whether it mimcs the editor colors, or takes the system 3D color and uses special colors for gutter marks (classic mode).
            </summary>
        </member>
        <member name="M:JetBrains.Platform.CommonServices.TextControlServices.ErrorStripeStyle.#ctor(System.Boolean,JetBrains.Platform.CommonServices.TextControlServices.ErrorStripeStyle.Brusher)">
            <summary>
            Creates a style.
            The object is frozen, create a new one to change.
            </summary>
            <param name="bUseEditorColors">
            Gets whether the Error Stripe works in the Editor Colors mode.
            If <c>True</c>, then the Editor Colors mode is used, that is, the background is of the text editor background color, and the markers follow the highlighters color. It is recommended that you set the <see cref="P:JetBrains.Platform.CommonServices.TextControlServices.ErrorStripeStyle.BackgroundBrusher"/> and provide the real editor color in it, otherwise, the system Window color will be used, which is not quite correct.
            If <c>False</c>, works in the classic mode where the background is of the system 3D color and the mark colors are hard-coded.
            </param>
            <param name="funcBackgroundBrusher">
            Gets the delegate that creates a brush for painting the Error Stripe background.
            It is highly recommended to specify this value in Editor Colors mode (<see cref="P:JetBrains.Platform.CommonServices.TextControlServices.ErrorStripeStyle.IsUsingEditorColors"/> is <c>True</c>), as the proper customized editor color should be supplied in this case. The base implementation can use the system Window color only.
            </param>
        </member>
        <member name="M:JetBrains.Platform.CommonServices.TextControlServices.ErrorStripeStyle.CreateClassic">
            <summary>
            Creates the classic style.
            The object is frozen, create a new one to change.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.CommonServices.TextControlServices.ErrorStripeStyle.CreateClassicToTheLeft">
            <summary>
            Creates the classic style.
            The object is frozen, create a new one to change.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.CommonServices.TextControlServices.ErrorStripeStyle.CreateEditorColorsMode(JetBrains.Platform.CommonServices.TextControlServices.ErrorStripeStyle.Brusher)">
            <summary>
            Creates the Editor Colors Mode style.
            The object is frozen, create a new one to change.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.CommonServices.TextControlServices.ErrorStripeStyle.CreateEditorColorsModeToTheLeft(JetBrains.Platform.CommonServices.TextControlServices.ErrorStripeStyle.Brusher)">
            <summary>
            Creates the Editor Colors Mode style.
            The object is frozen, create a new one to change.
            </summary>
        </member>
        <member name="P:JetBrains.Platform.CommonServices.TextControlServices.ErrorStripeStyle.BackgroundBrusher">
            <summary>
            Gets the delegate that creates a brush for painting the Error Stripe background.
            </summary>
        </member>
        <member name="P:JetBrains.Platform.CommonServices.TextControlServices.ErrorStripeStyle.IsUsingEditorColors">
            <summary>
            Gets whether the Error Stripe works in the Editor Colors mode.
            If <c>True</c>, then the Editor Colors mode is used, that is, the background is of the text editor background color, and the markers follow the highlighters color. It is recommended that you set the <see cref="P:JetBrains.Platform.CommonServices.TextControlServices.ErrorStripeStyle.BackgroundBrusher"/> and provide the real editor color in it, otherwise, the system Window color will be used, which is not quite correct.
            If <c>False</c>, works in the classic mode where the background is of the system 3D color and the mark colors are hard-coded. Setting the <see cref="P:JetBrains.Platform.CommonServices.TextControlServices.ErrorStripeStyle.BackgroundBrusher"/> is not recommended in this mode.
            </summary>
        </member>
        <member name="P:JetBrains.Platform.CommonServices.TextControlServices.ErrorStripeStyle.Location">
            <summary>
            Gets whether the Error Stripe works in the Editor Colors mode.
            If <c>True</c>, then the Editor Colors mode is used, that is, the background is of the text editor background color, and the markers follow the highlighters color. It is recommended that you set the <see cref="P:JetBrains.Platform.CommonServices.TextControlServices.ErrorStripeStyle.BackgroundBrusher"/> and provide the real editor color in it, otherwise, the system Window color will be used, which is not quite correct.
            If <c>False</c>, works in the classic mode where the background is of the system 3D color and the mark colors are hard-coded. Setting the <see cref="P:JetBrains.Platform.CommonServices.TextControlServices.ErrorStripeStyle.BackgroundBrusher"/> is not recommended in this mode.
            </summary>
        </member>
        <member name="T:JetBrains.Platform.CommonServices.TextControlServices.ErrorStripeStyle.Brusher">
            <summary>
            A delegate for creating brushes on-demand.
            </summary>
        </member>
        <member name="T:JetBrains.Platform.CommonServices.TextControlServices.ErrorStripeTooltipEventArgs">
            <summary>
            See <see cref="E:JetBrains.Platform.CommonServices.TextControlServices.IVsTextViewShared2.ErrorStripeTooltipRequested"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Platform.CommonServices.TextControlServices.ErrorStripeTooltipEventArgs.ClientPoint">
            <summary>
            [in] The query point, in client coordinates of the error stripe.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.CommonServices.TextControlServices.ErrorStripeTooltipEventArgs.SetTooltip(System.String,System.Object,System.Drawing.Rectangle)">
            <summary>
            Sets the tooltip information.
            The properties do not have individual setters so that handlers in different products were not merging together but overriding the other entirely.
            Do not call this method at all if you do not have a tooltip to provide.
            </summary>
        </member>
        <member name="P:JetBrains.Platform.CommonServices.TextControlServices.ErrorStripeTooltipEventArgs.HasTooltip">
            <summary>
            Gets whether the tooltip has been assigned to this object.
            </summary>
        </member>
        <member name="P:JetBrains.Platform.CommonServices.TextControlServices.ErrorStripeTooltipEventArgs.ToolArea">
            <summary>
            [out] When returning a tooltip, defines an area around the <see cref="F:JetBrains.Platform.CommonServices.TextControlServices.ErrorStripeTooltipEventArgs.ClientPoint"/> for which the tooltip will be the same (guaranteeed to include the  <see cref="F:JetBrains.Platform.CommonServices.TextControlServices.ErrorStripeTooltipEventArgs.ClientPoint"/> in this case). N/A when not returning tooltip.
            </summary>
        </member>
        <member name="P:JetBrains.Platform.CommonServices.TextControlServices.ErrorStripeTooltipEventArgs.TooltipPlainTextContent">
            <summary>
            [out] When returning a tooltip, defines the plain text content to be displayed on the tooltip.
            Rich text might also be set to <see cref="P:JetBrains.Platform.CommonServices.TextControlServices.ErrorStripeTooltipEventArgs.TooltipRichContent"/>.
            </summary>
        </member>
        <member name="P:JetBrains.Platform.CommonServices.TextControlServices.ErrorStripeTooltipEventArgs.TooltipRichContent">
            <summary>
            [out] When returning a tooltip, and <see cref="P:JetBrains.Platform.CommonServices.TextControlServices.ErrorStripeTooltipEventArgs.TooltipPlainTextContent"/> is non-Null, optionally defines the rich content to be displayed on the tooltip.
            The supported object types are defined by the current implementation.
            Unsupported object kinds are gracefully ignored, and implementation falls back to <see cref="P:JetBrains.Platform.CommonServices.TextControlServices.ErrorStripeTooltipEventArgs.TooltipPlainTextContent"/>.
            </summary>
        </member>
        <member name="T:JetBrains.Platform.CommonServices.TextControlServices.ErrorStripeTooltipEventHandler">
            <summary>
            See <see cref="E:JetBrains.Platform.CommonServices.TextControlServices.IVsTextViewShared2.ErrorStripeTooltipRequested"/>.
            </summary>
        </member>
        <member name="T:JetBrains.Platform.CommonServices.TextControlServices.IErrorStripeStyleService">
            <summary>
            Error Stripe customization.
            </summary>
        </member>
        <member name="P:JetBrains.Platform.CommonServices.TextControlServices.IErrorStripeStyleService.Style">
            <summary>
            Gets or sets the Error Stripe Style.
            A style is frozen, create a new object to change any style property.
            </summary>
        </member>
        <member name="T:JetBrains.Platform.CommonServices.TextControlServices.Impl.VsTextViewShared">
            <summary>
            This a personal object over the shared text view. Each shared text view client gets a new object instance.
            </summary>
        </member>
        <member name="T:JetBrains.Platform.CommonServices.TextControlServices.IVsTextViewShared2">
            <summary>
            Extends <see cref="T:JetBrains.Platform.CommonServices.TextControlServices.IVsTextViewShared"/>.
            </summary>
            <remarks>
            Added as of R#5.
            </remarks>
        </member>
        <member name="T:JetBrains.Platform.CommonServices.TextControlServices.IVsTextViewShared">
            <summary>
            Extends the Visual Studio <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView"/> interface, allows for cooperation on its functionality shared between addins, like Error Stripe.
            For sharing a text view, get a copy from <see cref="M:JetBrains.Platform.CommonServices.TextControlServices.IVsTextViewSharedService.CreateSharedTextView(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)"/>.
            Actually, each consumer gets its own instance of the <see cref="T:JetBrains.Platform.CommonServices.TextControlServices.IVsTextViewShared"/> object, and these instances talk to the single class controlling the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView"/> behavior.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.CommonServices.TextControlServices.IVsTextViewShared.InvalidateErrorStripe">
            <summary>
            Causes the error stripe window to repaint itself.
            </summary>
        </member>
        <member name="P:JetBrains.Platform.CommonServices.TextControlServices.IVsTextViewShared.EditPaneWindow">
            <summary>
            Gets the Text Control Edit Pane native window, or <c>Null</c> if it has not been created or subclassed yet, or is not an HWND.
            In VS10 and above, will always be <c>Null</c>.
            </summary>
        </member>
        <member name="P:JetBrains.Platform.CommonServices.TextControlServices.IVsTextViewShared.ErrorStripeCursor">
            <summary>
            Gets or sets the mouse cursor WinAPI handle to be used over the Error Stripe.
            Be sure to set it to <c>Null</c> when you do not need any specific cursor (mouse is not over an error stipe mark), so that other clients could set it to their own cursor when it hovers their marks. Do not use the <see cref="F:JetBrains.Interop.WinApi.StockCursors.IDC_ARROW"/> in this case.
            Safe to call when not <see cref="P:JetBrains.Platform.CommonServices.TextControlServices.IVsTextViewShared.IsCustomizationFinished"/>.
            A typical application would set the cursor from the <c>GetTooltip</c> method, either to <see cref="F:JetBrains.Interop.WinApi.StockCursors.IDC_HAND"/> or <c>Null</c>, depending on whether the mouse pointer is over their mark or not.
            </summary>
        </member>
        <member name="P:JetBrains.Platform.CommonServices.TextControlServices.IVsTextViewShared.ErrorStripeSize">
            <summary>
            Gets the error stripe window size, or <see cref="F:System.Drawing.Size.Empty"/> if it has not been created or subclassed yet.
            </summary>
        </member>
        <member name="P:JetBrains.Platform.CommonServices.TextControlServices.IVsTextViewShared.ErrorStripeWindow">
            <summary>
            Gets the Error Stripe native window, or <c>Null</c> if it has not been created or subclassed yet.
            In VS10 and above, will always be <c>Null</c>.
            </summary>
        </member>
        <member name="P:JetBrains.Platform.CommonServices.TextControlServices.IVsTextViewShared.HasErrorStipe">
            <summary>
            Gets or sets whether this particular handler requests the Error Stripe for this text control.
            If at least one <see cref="T:JetBrains.Platform.CommonServices.TextControlServices.IVsTextViewShared"/> client requests the error stripe, it's added to the text control window model.
            </summary>
            <remarks>NOTE: MUST NOT fix the typo. It's committed. :-(.</remarks>
        </member>
        <member name="P:JetBrains.Platform.CommonServices.TextControlServices.IVsTextViewShared.IsCustomizationFinished">
            <summary>
            Gets whether we've completely attached to the VS view.
            </summary>
            <seealso cref="E:JetBrains.Platform.CommonServices.TextControlServices.IVsTextViewShared.HandleCreated"/>
        </member>
        <member name="P:JetBrains.Platform.CommonServices.TextControlServices.IVsTextViewShared.TextView">
            <summary>
            Gets the raw VS text view interface that is wrapped by this object.
            </summary>
        </member>
        <member name="P:JetBrains.Platform.CommonServices.TextControlServices.IVsTextViewShared.TextViewWindow">
            <summary>
            Gets the Text View native window, or <c>Null</c> if it has not been created or subclassed yet or if it does not have an HWND.
            In VS10 and above, will always be <c>Null</c>.
            </summary>
        </member>
        <member name="E:JetBrains.Platform.CommonServices.TextControlServices.IVsTextViewShared.ErrorStripeMouseClick">
            <summary>
            Fires when user clicks on the error stipe.
            Allows to handle clicks on error stripe marks.
            </summary>
        </member>
        <member name="E:JetBrains.Platform.CommonServices.TextControlServices.IVsTextViewShared.ErrorStripePaint">
            <summary>
            Fires when the error stripe repaints itself.
            Allows to add new visuals to the stripe.
            </summary>
        </member>
        <member name="E:JetBrains.Platform.CommonServices.TextControlServices.IVsTextViewShared.HandleCreated">
            <summary>
            Fires when the WinAPI windows are created for the text control, and their handles are finally available.
            When this object is created over an existing text view, this event is fired immediately on construction.
            </summary>
            <seealso cref="P:JetBrains.Platform.CommonServices.TextControlServices.IVsTextViewShared.IsCustomizationFinished"/>
        </member>
        <member name="E:JetBrains.Platform.CommonServices.TextControlServices.IVsTextViewShared.Resize">
            <summary>
            This event is no more supported.
            Use <c>IAnchoringRect</c> provided by the text control window for tracking the text view area changes.
            MUST be kept for compatibility.
            </summary>
        </member>
        <member name="E:JetBrains.Platform.CommonServices.TextControlServices.IVsTextViewShared2.ErrorStripeTooltipRequested">
            <summary>
            Allows to define own tooltips over areas on the error stripe.
            </summary>
        </member>
        <member name="T:JetBrains.Platform.CommonServices.TextControlServices.Impl.VsTextViewSharedService">
            <summary>
            Implements the service, creates our shared-views over VS text views.
            Keeps the list of the views.
            </summary>
        </member>
        <member name="T:JetBrains.Platform.CommonServices.TextControlServices.IVsTextViewSharedService">
            <summary>
            A service that allows to extend the Text View functionality and share it between platform-based clients.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.CommonServices.TextControlServices.IVsTextViewSharedService.CreateSharedTextView(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
            <summary>
            Creates a new view-ex instance and subclasses the view window.
            To unsubclass the window, <see cref="M:System.IDisposable.Dispose"/> the return value when done with it.
            </summary>
            <param name="textView">The text view to customize.</param>
            <returns>The extended text view interface, dispose of when done.</returns>
        </member>
        <member name="F:JetBrains.Platform.CommonServices.TextControlServices.Impl.VsTextViewSharedService.myTextViewShims">
            <summary>
            Shims for text-views that create shared-text-views.
            </summary>
        </member>
        <member name="F:JetBrains.Platform.CommonServices.TextControlServices.Impl.VsTextViewSharedService.myThread">
            <summary>
            Thread affinity control.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.CommonServices.TextControlServices.Impl.VsTextViewSharedService.AddTextViewShim(JetBrains.Platform.CommonServices.TextControlServices.Impl.VsTextViewShim)">
            <summary>
            Called by shim on creation to self-reg.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.CommonServices.TextControlServices.Impl.VsTextViewSharedService.RemoveTextViewShim(JetBrains.Platform.CommonServices.TextControlServices.Impl.VsTextViewShim)">
            <summary>
            Called by the shim on disposal (on final-release) to self-unreg.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.CommonServices.TextControlServices.Impl.VsTextViewSharedService.AssertThreadAffinity">
            <summary>
            Asserts we're used on one thread only.
            </summary>
        </member>
        <member name="T:JetBrains.Platform.CommonServices.TextControlServices.Impl.VsTextViewShim">
            <summary>
            Wraps a text view (per-<see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView"/> singleton, even against multiple platform-based products on different platform versions).
            Incapsulates a text view subclassing (creates on-demand, when the text view gets its handle).
            Keeps a list of shared views for this text view.
            Self-disposes when the last shared-view goes away ("final-release").
            </summary>
        </member>
        <member name="T:JetBrains.Platform.CommonServices.TextControlServices.IVsTextViewShimImplementation">
            <summary>
            Starting with ReSharper 5, we need to take the shim implementation out of the common services DLL and into the product itself (mostly due to MEF complications in VS10, and also to have separate VS8-10 implementations, and so on).
            This is an interface for such an implementation.
            </summary>
            <remarks>Basically, <see cref="T:JetBrains.Platform.CommonServices.TextControlServices.IVsTextViewShared"/> objects attached to the same view are demuxed and wired to the current implementation for that text view by its <see cref="T:JetBrains.Platform.CommonServices.TextControlServices.Impl.VsTextViewShim"/>. Thus, this currently is the same API as <see cref="T:JetBrains.Platform.CommonServices.TextControlServices.IVsTextViewShared"/>.</remarks>
        </member>
        <member name="M:JetBrains.Platform.CommonServices.TextControlServices.IVsTextViewShimImplementation.Init">
            <summary>
            Completes the impl intialization after the clients are attached and sinking for events.
            </summary>
        </member>
        <member name="F:JetBrains.Platform.CommonServices.TextControlServices.Impl.VsTextViewShim.mySharedViews">
            <summary>
            List of the alive shared views registered for this text view.
            When the last one goes away, we go away too.
            </summary>
        </member>
        <member name="F:JetBrains.Platform.CommonServices.TextControlServices.Impl.VsTextViewShim.myVsTextView">
            <summary>
            Text view we're wrapping.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.CommonServices.TextControlServices.Impl.VsTextViewShim.#ctor(JetBrains.Platform.CommonServices.TextControlServices.Impl.VsTextViewSharedService,Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
            <summary>
            Creates. Registers in the owner list.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.CommonServices.TextControlServices.Impl.VsTextViewShim.CreateSharedView">
            <summary>
            Creates a new shared text view over the text view.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.CommonServices.TextControlServices.Impl.VsTextViewShim.AddSharedView(JetBrains.Platform.CommonServices.TextControlServices.IVsTextViewShared)">
            <summary>
            A new shared view calls this from ctor to self-reg.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.CommonServices.TextControlServices.Impl.VsTextViewShim.RemoveSharedView(JetBrains.Platform.CommonServices.TextControlServices.IVsTextViewShared)">
            <summary>
            Called by a dying shared-view to self-unreg.
            When the last one is gone, we dispose of ourselves too.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.CommonServices.TextControlServices.Impl.VsTextViewShim.Trace(System.String)">
            <summary>
            Traces (if allowed) with added ID of the VS View.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.CommonServices.TextControlServices.Impl.VsTextViewShim.UpdateErrorStripeCursor">
            <summary>
            When the cursor changes on one of the shared-views, applies the aggregate value to the error-stripe proper.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.CommonServices.TextControlServices.Impl.VsTextViewShim.UpdateHasErrorStripe">
            <summary>
            Aggregates the error stripe requests from all of the sharedviews, ORs them, and applies to the subclassing object (if available).
            </summary>
        </member>
        <member name="M:JetBrains.Platform.CommonServices.TextControlServices.Impl.VsTextViewShim.OnErrorStripeMouseClick(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Sinks the impl event, fires towards the listening shared-view objects.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.CommonServices.TextControlServices.Impl.VsTextViewShim.OnErrorStripePaint(System.Object,System.Windows.Forms.PaintEventArgs)">
            <summary>
            Sinks the impl event, fires towards the listening shared-view objects.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.CommonServices.TextControlServices.Impl.VsTextViewShim.OnErrorStripeTooltipRequested(System.Object,JetBrains.Platform.CommonServices.TextControlServices.ErrorStripeTooltipEventArgs)">
            <summary>
            Sinks the impl event, fires towards the listening shared-view objects.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.CommonServices.TextControlServices.Impl.VsTextViewShim.OnHandleCreated(System.Object,System.EventArgs)">
            <summary>
            Sinks the impl event, fires towards the listening shared-view objects.
            </summary>
        </member>
        <member name="E:JetBrains.Platform.CommonServices.TextControlServices.Impl.VsTextViewShim.ErrorStripeMouseClick">
            <summary>
            Shared text view attaches to this event to multiplex it to the clients.
            </summary>
        </member>
        <member name="E:JetBrains.Platform.CommonServices.TextControlServices.Impl.VsTextViewShim.ErrorStripePaint">
            <summary>
            Shared text view attaches to this event to multiplex it to the clients.
            </summary>
        </member>
        <member name="E:JetBrains.Platform.CommonServices.TextControlServices.Impl.VsTextViewShim.HandleCreated">
            <summary>
            Shared text view attaches to this event to multiplex it to the clients.
            </summary>
        </member>
        <member name="P:JetBrains.Platform.CommonServices.TextControlServices.Impl.VsTextViewShim.TextView">
            <summary>
            The view being wrapped.
            </summary>
        </member>
        <member name="P:JetBrains.Platform.CommonServices.TextControlServices.Impl.VsTextViewShim.JetBrains#Platform#CommonServices#TextControlServices#IVsTextViewShared#ErrorStripeCursor">
            <summary>
            Belongs to the nested impl, we just impl the same interface for simplicity, we're called for <see cref="M:JetBrains.Platform.CommonServices.TextControlServices.Impl.VsTextViewShim.UpdateErrorStripeCursor"/> to collect and aggregate values from all of the child shared views.
            </summary>
        </member>
        <member name="P:JetBrains.Platform.CommonServices.TextControlServices.Impl.VsTextViewShim.JetBrains#Platform#CommonServices#TextControlServices#IVsTextViewShared#HasErrorStipe">
            <summary>
            Belongs to the nested impl, we just impl the same interface for simplicity, we're called for <see cref="M:JetBrains.Platform.CommonServices.TextControlServices.Impl.VsTextViewShim.UpdateHasErrorStripe"/> to collect and aggregate values from all of the child shared views.
            </summary>
        </member>
        <member name="T:JetBrains.Platform.CommonServices.TextControlServices.IVsTextViewShimImplementationFactory">
            <summary>
            A factory for creating text view shim implementations (per-view singletons) for a text view.
            </summary>
        </member>
        <member name="T:JetBrains.Platform.CommonServices.TextControlServices.IVsTextViewShimImplementationFactoryService">
            <summary>
            Starting with ReSharper 5, we need to take the shim implementation out of the common services DLL and into the product itself (mostly due to MEF complications in VS10, and also to have separate VS8-10 implementations, and so on).
            Products should register their implementations in here.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.CommonServices.TextControlServices.IVsTextViewShimImplementationFactoryService.RegisterVsTextViewShimImplementationFactory(JetBrains.Platform.CommonServices.TextControlServices.IVsTextViewShimImplementationFactory,System.Double)">
            <summary>
            Registers a factory for the objects to customize each text view. Those objects are per-view singletons, and their APIs are then multiplexed to <see cref="T:JetBrains.Platform.CommonServices.TextControlServices.IVsTextViewShared"/> per-product-per-text-view instances attached to each text view.
            Each product should call this when started up, and dispose of the return value when tearing down. CommonServices will pick the best implementation to use at each moment.
            </summary>
            <param name="factory">The factory, by the current product.</param>
            <param name="rank">Rank of the factory, so that to choose the most recent one out of the currently running products. The higher the rank, the better the implementation. Basically, it should be incremented with each new platform version. Note that a newer CommonServices DLL does not mean the best implementation, because the owning product could be suspended at the moment.</param>
            <returns>A token for revoking the factory on product teardown.</returns>
        </member>
        <member name="T:JetBrains.Platform.CommonServices.TextControlServices.SErrorStripeStyleService">
            <summary>
            Provides the <see cref="T:JetBrains.Platform.CommonServices.TextControlServices.IErrorStripeStyleService"/> service instance.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.CommonServices.TextControlServices.SErrorStripeStyleService.GetInstance">
            <summary>
            Service instance (no service provider yet).
            </summary>
        </member>
        <member name="T:JetBrains.Platform.CommonServices.TextControlServices.SVsTextViewSharedService">
            <summary>
            Gets the <see cref="T:JetBrains.Platform.CommonServices.TextControlServices.IVsTextViewSharedService"/> service.
            </summary>
        </member>
        <member name="T:JetBrains.Platform.CommonServices.TextControlServices.SVsTextViewShimImplementationFactoryService">
            <summary>
            Gets the <see cref="T:JetBrains.Platform.CommonServices.TextControlServices.IVsTextViewShimImplementationFactoryService"/> service.
            </summary>
        </member>
        <member name="T:JetBrains.Platform.CommonServices.TextControlServices.Impl.VsTextViewShimImplementationFactoryService">
            <summary>
            Just the service impl.
            </summary>
        </member>
        <member name="F:JetBrains.Platform.CommonServices.TextControlServices.Impl.VsTextViewShimImplementationFactoryService.myFactories">
            <summary>
            Currently known implementations.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.CommonServices.TextControlServices.Impl.VsTextViewShimImplementationFactoryService.PushForEachCurrentFactoryValue_NotNull(System.Action{JetBrains.Platform.CommonServices.TextControlServices.IVsTextViewShimImplementationFactory},System.Action{JetBrains.Platform.CommonServices.TextControlServices.IVsTextViewShimImplementationFactory})">
            <summary>
            For each non-<c>Null</c> value the <see cref="P:JetBrains.Platform.CommonServices.TextControlServices.Impl.VsTextViewShimImplementationFactoryService.CurrentFactory"/> property ever has, executes a pair of actions: <paramref name="FEnter"/> when the value is set, and <paramref name="FLeave"/> when the value is superceeded by some other one.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.CommonServices.TextControlServices.Impl.VsTextViewShimImplementationFactoryService.ChooseBestFactory">
            <summary>
            <see cref="M:JetBrains.Platform.CommonServices.TextControlServices.Impl.VsTextViewShimImplementationFactoryService.SetCurrentFactory(JetBrains.Platform.CommonServices.TextControlServices.Impl.VsTextViewShimImplementationFactoryService.FactoryEntry)"/> for the best one on the list, or <c>Null</c> if none at all listed.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.CommonServices.TextControlServices.Impl.VsTextViewShimImplementationFactoryService.SetCurrentFactory_EnterLeave(System.Collections.Generic.KeyValuePair{System.Action{JetBrains.Platform.CommonServices.TextControlServices.IVsTextViewShimImplementationFactory},System.Action{JetBrains.Platform.CommonServices.TextControlServices.IVsTextViewShimImplementationFactory}}[],System.Boolean)">
            <summary>
            Handlers for the factory change (enter/leave).
            </summary>
        </member>
        <member name="M:JetBrains.Platform.CommonServices.TextControlServices.Impl.VsTextViewShimImplementationFactoryService.FactoryEntry.#ctor(System.Double,JetBrains.Platform.CommonServices.TextControlServices.IVsTextViewShimImplementationFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
    </members>
</doc>
