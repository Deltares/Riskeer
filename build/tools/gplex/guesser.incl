//
//  This CSharp output file generated by Gardens Point LEX
//  Version:  1.0.0.240 (2008-11-01)
//  Machine:  ATTIC-1
//  DateTime: 28/10/2008 4:59:53 PM
//  UserName: john
//  GPLEX input file <guesser.lex>
//  GPLEX frame file <guesser.frame>
//
//  Option settings: noparser, minimize, classes, nocompressmap, nocompressnext
//

//
// Guesser.frame version 1.0.0 of 01-November-2008
//


namespace Guesser
{   
    public enum Tokens
    { 
      EOF = 0, maxParseToken = int.MaxValue 
    }

    public abstract class ScanBuff
    {
        public const int EOF = -1;
        public abstract int Pos { get; set; }
        public abstract int Read();
    }
        
    public class Scanner
    {
        ScanBuff buffer;
        
        enum Result {accept, noMatch, contextFound};
        
        bool yywrap() { return true; }
        
        public int GuessCodepage()
        {
            return Scan();
        }

        const int maxAccept = 10;
        const int initial = 0;
        const int eofNum = 0;
        const int goStart = -1;
        const int INITIAL = 0;

#region user code
/* 
 *  Reads the bytes of a file to determine if it is 
 *  UTF-8 or a single-byte codepage file.
 */
public long utfX = 0;
    public long uppr = 0;
#endregion user code

        int state;
        int currentStart = startState[0];
        int chr;
        
#region ScannerTables
  static int[] startState = {11, 0};

#region CharacterMap
    static sbyte[] map = new sbyte[256] {
/*     '\0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*   '\x10' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*   '\x20' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*      '0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*      '@' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*      'P' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*      '`' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*      'p' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*   '\x80' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/*   '\x90' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/*   '\xA0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/*   '\xB0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/*   '\xC0' */ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
/*   '\xD0' */ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
/*   '\xE0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/*   '\xF0' */ 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5 };
#endregion

  static sbyte[][] nextState = new sbyte[12][];
  static Scanner() {
    nextState[0] = new sbyte[] {0, 0, 0, 0, 0, 0};
    nextState[1] = new sbyte[] {-1, -1, 10, -1, -1, -1};
    nextState[2] = new sbyte[] {-1, -1, -1, -1, -1, -1};
    nextState[3] = new sbyte[] {-1, -1, 8, -1, -1, -1};
    nextState[4] = new sbyte[] {-1, -1, 5, -1, -1, -1};
    nextState[5] = new sbyte[] {-1, -1, 6, -1, -1, -1};
    nextState[6] = new sbyte[] {-1, -1, 7, -1, -1, -1};
    nextState[7] = nextState[2];
    nextState[8] = new sbyte[] {-1, -1, 9, -1, -1, -1};
    nextState[9] = nextState[2];
    nextState[10] = nextState[2];
    nextState[11] = new sbyte[] {-1, 1, 2, 3, 4, 2};
}

int NextState() {
    if (chr == ScanBuff.EOF)
        return eofNum;
    else
        return nextState[state][map[chr]];
}

#endregion

        public class StreamBuff : ScanBuff
        {
            protected System.IO.BufferedStream bStrm;   // input buffer

            public StreamBuff(System.IO.Stream str) 
            { 
                this.bStrm = new System.IO.BufferedStream(str); 
            }

            public override int Read() { return bStrm.ReadByte(); }

            public override int Pos
            {
                get { return (int)bStrm.Position; }
                set { bStrm.Position = value; }
            }
        }

        public Scanner(System.IO.Stream file) { SetSource(file); }

        public void SetSource(System.IO.Stream source)
        {
            this.buffer = new StreamBuff(source);
            chr = buffer.Read();
        }

        int Scan()
        {
                for (; ; )
                {
                    int next;                   
                    state = currentStart;
                    while ((next = NextState()) == goStart)
                        chr = buffer.Read();
    
                    state = next;
                    chr = buffer.Read();
                    
                    while ((next = NextState()) > eofNum)
                    {
                        state = next;
                        chr = buffer.Read();
                    }
                    if (state <= maxAccept) 
                    {
#region ActionSwitch
#pragma warning disable 162
    switch (state)
    {
        case eofNum:
            switch (currentStart) {
                case 11:
if (utfX == 0 && uppr == 0) return -1; /* raw ascii */
                           else if (uppr * 10 > utfX) return 0;   /* default codepage */
                           else return 65001;                     /* UTF-8 encoding */
                    break;
            }
            if (yywrap())
                return (int)Tokens.EOF;
            break;
        case 1:
        case 2:
        case 3:
        case 4:
uppr++;
            break;
        case 5:
uppr += 2;
            break;
        case 6:
uppr += 3;
            break;
        case 7:
utfX += 3;
            break;
        case 8:
uppr += 2;
            break;
        case 9:
utfX += 2;
            break;
        case 10:
utfX++;
            break;
        default:
            break;
    }
#pragma warning restore 162
#endregion
                    }
                }
        }        
    } // end class Scanner
} // end namespace
