// Copyright (C) Stichting Deltares 2016. All rights reserved.
//
// This file is part of Ringtoets.
//
// Ringtoets is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program. If not, see <http://www.gnu.org/licenses/>.
//
// All names, logos, and references to "Deltares" are registered trademarks of
// Stichting Deltares and remain full property of Stichting Deltares at all times.
// All rights reserved.

using System.Collections.Generic;

namespace Ringtoets.HydraRing.Calculation.Data.Output
{
    /// <summary>
    /// Container of all relevant output generated by a type I calculation via Hydra-Ring:
    /// Given a set of random variables, compute the probability of failure.
    /// </summary>
    public class ExceedanceProbabilityCalculationOutput
    {
        /// <summary>
        /// Creates a new instance of <see cref="ExceedanceProbabilityCalculationOutput"/>.
        /// </summary>
        /// <param name="ringCombinMethod"></param>
        /// <param name="presentationSectionId"></param>
        /// <param name="mainMechanismId"></param>
        /// <param name="mainMechanismCombinMethod"></param>
        /// <param name="mechanismId"></param>
        /// <param name="sectionId"></param>
        /// <param name="layerId"></param>
        /// <param name="alternativeId"></param>
        /// <param name="beta"></param>
        public ExceedanceProbabilityCalculationOutput(int ringCombinMethod, int presentationSectionId,
                                                      int mainMechanismId, int mainMechanismCombinMethod, int mechanismId,
                                                      int sectionId, int layerId, int alternativeId, double beta)
        {
            RingCombinMethod = ringCombinMethod;
            PresentationSectionId = presentationSectionId;
            MainMechanismId = mainMechanismId;
            MainMechanismCombinMethod = mainMechanismCombinMethod;
            MechanismId = mechanismId;
            SectionId = sectionId;
            LayerId = layerId;
            AlternativeId = alternativeId;
            Beta = beta;
            AplhaValues = new List<double>();
        }

        /// <summary>
        /// Gets the Ring Combine Method.
        /// </summary>
        public int RingCombinMethod { get; private set; }

        /// <summary>
        /// Gets the Presentation Section Id.
        /// </summary>
        public int PresentationSectionId { get; private set; }

        /// <summary>
        /// Gets the Main Mechanism Id.
        /// </summary>
        public int MainMechanismId { get; private set; }

        /// <summary>
        /// Gets the Main Mechanism Combine Method.
        /// </summary>
        public int MainMechanismCombinMethod { get; private set; }

        /// <summary>
        /// Gets the Mechanism Id.
        /// </summary>
        public int MechanismId { get; private set; }

        /// <summary>
        /// Gets the Section Id.
        /// </summary>
        public int SectionId { get; private set; }

        /// <summary>
        /// Gets the Layer Id.
        /// </summary>
        public int LayerId { get; private set; }

        /// <summary>
        /// Gets the Alternative Id.
        /// </summary>
        public int AlternativeId { get; private set; }

        /// <summary>
        /// Gets the Beta result.
        /// </summary>
        public double Beta { get; private set; }

        /// <summary>
        /// Gets the Alpha result values.
        /// </summary>
        public IList<double> AplhaValues { get; private set; }
    }
}