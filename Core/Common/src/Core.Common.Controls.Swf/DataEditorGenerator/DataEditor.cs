using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Windows.Forms;
using Core.Common.Controls.Swf.DataEditorGenerator.Binding;
using Core.Common.Controls.Swf.DataEditorGenerator.Binding.ControlBindings;
using Core.Common.Utils.Collections;
using IEditableObject = Core.Common.Utils.Editing.IEditableObject;

namespace Core.Common.Controls.Swf.DataEditorGenerator
{
    /// <summary>
    /// This class is the container of the user controls generated by the DataEditorGenerator.
    /// Add this to your view (Controls.Add(dataEditor)) and set its Data property.
    /// </summary>
    public class DataEditor : Panel
    {
        private object data;

        public DataEditor()
        {
            Dock = DockStyle.Fill; //default fill
            Bindings = new Collection<IBinding>();
        }

        public ICollection<IBinding> Bindings { get; private set; }

        public object Data
        {
            get
            {
                return data;
            }
            set
            {
                if (data != null)
                {
                    var propertyChanged = data as INotifyPropertyChanged;
                    if (propertyChanged != null)
                    {
                        propertyChanged.PropertyChanged -= DataPropertyChanged;
                    }

                    this.GetAllControlsRecursive<DataGridView>().ForEach(a => a.CancelEdit());

                    foreach (var binding in Bindings)
                    {
                        binding.Data = null;
                    }
                }

                data = value;

                if (data != null)
                {
                    foreach (var binding in Bindings)
                    {
                        binding.Data = data;
                    }

                    foreach (var binding in Bindings)
                    {
                        binding.Validate(binding.FieldDescription.GetValue(data));
                    }

                    var propertyChanged = data as INotifyPropertyChanged;
                    if (propertyChanged != null)
                    {
                        propertyChanged.PropertyChanged += DataPropertyChanged;
                    }
                }
            }
        }

        /// <summary>
        /// Gets the custom controls contained in this data editor. Provided for convenience: to 
        /// perform any manual data binding / customizations etc.
        /// </summary>
        /// <returns></returns>
        public IEnumerable<Control> GetCustomControls()
        {
            return Bindings.OfType<CustomControlBinding>().Select(ccb => ccb.EditControl);
        }

        private void DataPropertyChanged(object sender, PropertyChangedEventArgs e)
        {
            var dataAsEditableObject = data as IEditableObject;
            if (dataAsEditableObject != null && dataAsEditableObject.IsEditing)
            {
                return; // still editing, skip
            }

            foreach (var binding in Bindings)
            {
                binding.OnPropertyChanged(sender, e);
            }
        }
    }
}