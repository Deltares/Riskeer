<!--
Copyright (C) Stichting Deltares and State of the Netherlands 2023. All rights reserved.

This file is part of Riskeer.

Riskeer is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with this program. If not, see <http://www.gnu.org/licenses/>.

All names, logos, and references to "Deltares" are registered trademarks of
Stichting Deltares and remain full property of Stichting Deltares at all times.
All rights reserved.
-->
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:metro="http://metro.mahapps.com/winfx/xaml/controls">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="DeltaresGeneralStyle.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Style x:Key="ButtonIconStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="TextAlignment" Value="Center" />
        <Setter Property="FontFamily" Value="{StaticResource Symbols}" />
        <Setter Property="FontSize" Value="20" />
    </Style>

    <Style x:Key="ButtonLargeIconStyle" TargetType="{x:Type TextBlock}"
           BasedOn="{StaticResource ButtonIconStyle}">
        <Setter Property="FontSize" Value="32" />
    </Style>

    <Style x:Key="DeltaresButtonStyle" TargetType="{x:Type ButtonBase}">
        <Setter Property="Background" Value="{StaticResource DeltaresBlueBrush}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Foreground" Value="{StaticResource WhiteBrush}" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}">
                        <ContentPresenter Margin="{TemplateBinding Padding}"
                                          HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalAlignment}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource WhiteOverlayBrush}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{StaticResource DeltaresDarkerBlueBrush}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{StaticResource DarkOverlayBrush}"/>
                <Setter Property="Foreground" Value="{StaticResource DisabledButtonForegroundBrush}"/>
            </Trigger>

            <DataTrigger
                Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type metro:MetroWindow}}, Path=IsActive}"
                Value="False">
                <Setter Property="Background"
                        Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type metro:MetroWindow}}, Path=NonActiveBorderBrush}" />
            </DataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition
                        Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type metro:MetroWindow}}, Path=IsActive}"
                        Value="False" />
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" Value="{StaticResource WhiteOverlayBrush}" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition
                        Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type metro:MetroWindow}}, Path=IsActive}"
                        Value="False" />
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" Value="{StaticResource DarkOverlayBrush}" />
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ViewStateBarButtonStyle" TargetType="{x:Type ButtonBase}"
           BasedOn="{StaticResource DeltaresButtonStyle}">
        <Setter Property="Width" Value="30"/>
        <Setter Property="Height" Value="30"/>
    </Style>

    <Style x:Key="DeltaresToggleButtonStyle" TargetType="{x:Type ToggleButton}"
           BasedOn="{StaticResource DeltaresButtonStyle}">
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Background" Value="{StaticResource DeltaresDarkerBlueBrush}" />
            </Trigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition
                        Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type metro:MetroWindow}}, Path=IsActive}"
                        Value="False" />
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" Value="{StaticResource WhiteOverlayBrush}" />
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="MainButtonBarButtonStyle" TargetType="{x:Type ButtonBase}">
        <Setter Property="Padding" Value="0 6 0 0" />
        <Setter Property="Margin" Value="3 6 " />
        <Setter Property="MinWidth" Value="66" />
        <Setter Property="Height" Value="85" />
        <Setter Property="Background" Value="{StaticResource TransparentBrush}" />
        <Setter Property="BorderBrush" Value="{StaticResource TransparentBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="auto"/>
                                <RowDefinition Height="auto"/>
                            </Grid.RowDefinitions>
                            <ContentPresenter Grid.Row="0"
                                              HorizontalAlignment="Center"
                                              Margin="{TemplateBinding Padding}"/>
                            <TextBlock Grid.Row="1"
                                       Text="{TemplateBinding Tag}"
                                       Margin="{TemplateBinding Margin}"
                                       TextAlignment="Center"
                                       HorizontalAlignment="Center"
                                       Foreground="{TemplateBinding Foreground}"/>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource MainButtonBarPressedButtonBackgroundBrush}" />
                <Setter Property="BorderBrush" Value="{StaticResource MainButtonBarPressedButtonBorderBrush}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{StaticResource MainButtonBarPressedButtonBackgroundBrush}" />
                <Setter Property="BorderBrush" Value="{StaticResource MainButtonBarPressedButtonBorderBrush}" />
                <Setter Property="Foreground" Value="{StaticResource DeltaresBlueBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="MainButtonBarToggleButtonStyle" TargetType="{x:Type ToggleButton}"
           BasedOn="{StaticResource MainButtonBarButtonStyle}">
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Background" Value="{StaticResource MainButtonBarPressedButtonBackgroundBrush}" />
                <Setter Property="BorderBrush" Value="{StaticResource MainButtonBarPressedButtonBorderBrush}" />
                <Setter Property="Foreground" Value="{StaticResource DeltaresBlueBrush}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{StaticResource GrayBrush}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>